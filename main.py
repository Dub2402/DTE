from Source.Instruments import Calculator, CheckValidDate, GetFreeID, Skinwalker, FormatDays
from Source.InlineKeyboards import InlineKeyboards
from Source.ReplyKeyboard import ReplyKeyboard

from dublib.Methods.JSON import ReadJSON
from dublib.Methods.System import CheckPythonMinimalVersion, Clear
from dublib.Methods.Filesystem import MakeRootDirectories
from dublib.TelebotUtils import UsersManager
from dublib.Polyglot import Markdown
from telebot import types
from time import sleep

import telebot

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –≤–µ—Ä—Å–∏–∏ Python.
CheckPythonMinimalVersion(3, 10)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
MakeRootDirectories(["Data/Users"])
# –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏.
Clear()

Settings = ReadJSON("Settings.json")
Bot = telebot.TeleBot(Settings["token"])

Manager = UsersManager("Data/Users")
InlineKeyboardsBox = InlineKeyboards()
ReplyKeyboardBox = ReplyKeyboard()

@Bot.message_handler(commands=["start"])
def ProcessCommandStart(Message: types.Message):
	User = Manager.auth(Message.from_user)

	User.set_property("events", {}, False)
	Bot.send_message(
		Message.chat.id, 
		"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ\n\n–Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ —É–∑–Ω–∞–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –Ω–∏—Ö –æ—Å—Ç–∞–ª–æ—Å—å."
		)

	try:
		call = User.get_property("call")
		Bot.send_message(
			Message.chat.id, 
			f"{call}, –º—ã —Ä–∞–¥—ã –≤–Ω–æ–≤—å –≤–∏–¥–µ—Ç—å –≤–∞—Å! ü§ó",
			reply_markup= ReplyKeyboardBox.AddMenu(User)
			)
		
	except KeyError:
		Bot.send_message(
			Message.chat.id, 
			"–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è! ü§ó"
			)
		User.set_expected_type("call")

@Bot.message_handler(content_types = ["text"], regexp = "üóìÔ∏è C–æ–±—ã—Ç–∏—è")
def ProcessTextEvents(Message: types.Message):
	User = Manager.auth(Message.from_user)

	Bot.send_message(
		Message.chat.id, 
		"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ –æ—Ç–∫—Ä—ã—Ç–∞", reply_markup = ReplyKeyboardBox.AddMenuEvents(User))
	
@Bot.message_handler(content_types = ["text"], regexp = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
def ProcessTextReminders(Message: types.Message):
	# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	User = Manager.auth(Message.from_user)
	Bot.send_message(
		Message.chat.id, 
		"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ—Ç–∫—Ä—ã—Ç–∞", reply_markup= ReplyKeyboardBox.AddMenuReminders(User))
	
@Bot.message_handler(content_types = ["text"], regexp = "‚¨Ö –ù–∞–∑–∞–¥")
def ProcessTextReturn(Message: types.Message):
	# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	User = Manager.auth(Message.from_user)

	Bot.send_message(
		Message.chat.id, 
		"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∞", reply_markup = ReplyKeyboardBox.AddMenu(User))
	
@Bot.message_handler(content_types = ["text"], regexp = "‚ûï –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")
def ProcessTextNewEvent(Message: types.Message):
	User = Manager.auth(Message.from_user)

	Bot.send_message(
		Message.chat.id, 
		"–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ç–∞–∫ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë—Ç–µ\\! üòâ \n\n_–ù–∞–ø—Ä–∏–º–µ—Ä_\\: –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
			parse_mode = "MarkdownV2"
		)
	User.set_expected_type("name")

@Bot.message_handler(content_types = ["text"], regexp = "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
def ProcessTextNewReminder(Message: types.Message):
	User = Manager.auth(Message.from_user)

	CountReminders = 0
	Events = User.get_property("events")

	for EventID in Events.keys():
		if "Reminder" in Events[EventID].keys():
			CountReminders +=1
			
	if CountReminders <10 and User.get_property("events"):
		Bot.send_message(
			Message.chat.id, 
			"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")
		
		for EventID in Events.keys():
			name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text
			Bot.send_message(
				Message.chat.id,
				f"*{name}*",
				reply_markup = InlineKeyboardsBox.–°hoiceEvent(EventID),
				parse_mode = "MarkdownV2")
			sleep(0.2)

	elif not User.get_property("events"):
		Bot.send_message(
			Message.chat.id, 
			text= "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ! üôå",
			reply_markup = InlineKeyboardsBox.AddNewEvent()
			)
	else:
		Bot.send_message(
			Message.chat.id, 
			"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (>10).\n–£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

@Bot.message_handler(content_types = ["text"], regexp = "üóì –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è")
def ProcessTextMyEvents(Message: types.Message):
	User = Manager.auth(Message.from_user)

	if not User.get_property("events"):
		Bot.send_message(
			Message.chat.id, 
			"–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è üôÑ\n–ù—É–∂–Ω–æ —ç—Ç–æ –¥–µ–ª–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å\\!\\)",
			parse_mode = "MarkdownV2", 
			reply_markup= InlineKeyboardsBox.AddNewEvent()
			)

	else:
		call = Markdown(str(User.get_property("call"))).escaped_text
		Events = User.get_property("events")
		Bot.send_message(
					Message.chat.id,
					f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {call}\\!",
					parse_mode = "MarkdownV2")
		
		for EventID in Events.keys():
			remains = Calculator(User.get_property("events")[EventID]["Date"])
			name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text
			days = FormatDays(remains)

			if remains == 0:
				Bot.send_message(
					Message.chat.id,
					f"–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *{name}* —Å–µ–≥–æ–¥–Ω—è\\.",
					parse_mode = "MarkdownV2")

			elif remains > 0:
				remains = Markdown(str(remains)).escaped_text
				Bot.send_message(
					Message.chat.id, f"–î–æ —Å–æ–±—ã—Ç–∏—è *{name}* –æ—Å—Ç–∞–ª–æ—Å—å {remains} {days}\\!",
					parse_mode = "MarkdownV2"
				)
			else:
				if Events[EventID]["Format"] == "Passed":
					remains = Markdown(str(abs(remains))).escaped_text
					Bot.send_message(
						Message.chat.id, f"–°–æ–±—ã—Ç–∏–µ *{name}* –±—ã–ª–æ {remains} {days} –Ω–∞–∑–∞–¥\\!",
						parse_mode = "MarkdownV2"
					)

				if Events[EventID]["Format"] == "Remained":
					newdate = Skinwalker(User.get_property("events")[EventID]["Date"])
					remainsnew = Calculator(newdate)
					days = FormatDays(remainsnew)
					remainsnew = Markdown(str(remainsnew)).escaped_text
					Bot.send_message(
						Message.chat.id, 
						f"–î–æ —Å–æ–±—ã—Ç–∏—è *{name}* –æ—Å—Ç–∞–ª–æ—Å—å {remainsnew} {days}\\!",
						parse_mode = "MarkdownV2"
					)
			sleep(0.2)

@Bot.message_handler(content_types = ["text"], regexp = "üóë –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
def ProcessDeleteEvent(Message: types.Message):
	User = Manager.auth(Message.from_user)

	if not User.get_property("events"):
		Bot.send_message(
			Message.chat.id, 
			"–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è üôÑ\n–ù—É–∂–Ω–æ —ç—Ç–æ –¥–µ–ª–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å\\!\\)",
			parse_mode = "MarkdownV2", 
			reply_markup= InlineKeyboardsBox.AddNewEvent()
		)

	else:
		somedict = User.get_property("events").copy()
		DeleteMessage = Bot.send_message(
					Message.chat.id,
					f"–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è: ")
		
		User.set_temp_property("ID_DelMessage", DeleteMessage.id)
		for EventID in somedict.keys():
			name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text
			Bot.send_message(
				Message.chat.id,
				f"*{name}*",
				reply_markup = InlineKeyboardsBox.RemoveEvent(EventID),
				parse_mode = "MarkdownV2")
			sleep(0.2)

@Bot.message_handler(content_types = ["text"], regexp = "üóë –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
def ProcessDeleteReminder(Message: types.Message):
	User = Manager.auth(Message.from_user)

	CountReminder = 0
	somedict = User.get_property("events").copy()

	for EventID in somedict.keys():
		if "Reminder" in User.get_property("events")[EventID].keys():
			CountReminder += 1
	
	if CountReminder < 1:
		Bot.send_message(
			Message.chat.id, 
			"–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
			)
	else:
		DeleteMessage = Bot.send_message(
					Message.chat.id,
					f"–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ")
		User.set_temp_property("ID_DelMessage", DeleteMessage.id)

		for EventID in somedict.keys():
			Name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text

			if "Reminder" in somedict[EventID].keys():
				Reminder = Markdown(User.get_property("events")[EventID]["Reminder"]).escaped_text

				EditMessage = Bot.send_message(
					Message.chat.id,
					f"*{Name}*\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ {Reminder} –¥–Ω–µ–π\\!",
					reply_markup = InlineKeyboardsBox.RemoveReminder(EventID),
					parse_mode = "MarkdownV2")
				User.set_temp_property("ID_EditMessage", EditMessage.id)

			sleep(0.2)

@Bot.message_handler(content_types = ["text"], regexp = "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
def ProcessChangeName(Message: types.Message):
	User = Manager.auth(Message.from_user)

	Bot.send_message(
		Message.chat.id,
		"–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –Ω–æ–≤–æ–µ –∏–º—è!")
	User.set_expected_type("call")

@Bot.message_handler(content_types = ["text"], regexp = "üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏")
def ProcessShareWithFriends(Message: types.Message):
	User = Manager.auth(Message.from_user)

	Bot.send_message(
		Message.chat.id, 
		text='@Prasdnikkk_bot\n\n–õ—É—á—à–∏–π –±–æ—Ç –¥–ª—è –æ—Ç—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–Ω–µ–π –¥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ ü•≥\n–ü–æ–ª—å–∑—É–π—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ!)', 
		reply_markup=InlineKeyboardsBox.AddShare()
		)

@Bot.message_handler(content_types=["text"])
def ProcessText(Message: types.Message):
	User = Manager.auth(Message.from_user)

	if User.expected_type == "call":
		User.set_property("call", Message.text)
		User.set_expected_type(None)

		call = Markdown(str(User.get_property("call"))).escaped_text
		Bot.send_message(
			Message.chat.id,
			f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {call}! üòé",
		reply_markup = ReplyKeyboardBox.AddMenu(User)
		)
		sleep(0.5)

		if not User.get_property("events"):
			Bot.send_message(
			Message.chat.id, 
			text= "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ! üôå",
			reply_markup = InlineKeyboardsBox.AddNewEvent()
			)
		
		return
	
	if User.expected_type == "date":
		name = Markdown(User.get_property("date")).escaped_text
		if CheckValidDate(Message.text) == True:
			Events = User.get_property("events")
			FreeID = str(GetFreeID(Events))
			Events[FreeID] = {"Name": User.get_property("date"), "Date": Message.text}
			User.set_expected_type(None)
			User.set_property("events", Events)

			remains = Calculator(User.get_property("events")[FreeID]["Date"])
			name = Markdown(User.get_property("events")[FreeID]["Name"]).escaped_text
			days = FormatDays(remains)

			if remains > 0:
				Bot.send_message(
					Message.chat.id,
					text = f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\!\n\n–î–æ —Å–æ–±—ã—Ç–∏—è *{name}* –æ—Å—Ç–∞–ª–æ—Å—å {remains} {days}\\!", 
					parse_mode = "MarkdownV2"
					)
				
			elif remains == 0:
				Bot.send_message(
					Message.chat.id,
					text = f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\!\n\n–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *{name}* —Å–µ–≥–æ–¥–Ω—è\\!\\!\\! üòä", 
					parse_mode = "MarkdownV2"
					)
			else: 
				Bot.send_message(
					Message.chat.id,
					text ="–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—Å—á—ë—Ç–∞ –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å?",
					reply_markup= InlineKeyboardsBox.ChoiceFormat(User, FreeID)
				)
			
			User.clear_temp_properties()

		else:
			Bot.send_message(
				Message.chat.id, 
				"–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
				)

		return

	if User.expected_type == "name":
		User.set_temp_property("date", Message.text)
		Bot.send_message(
			Message.chat.id,
			"–ê —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–∞—Ç–∞ –≤–∞—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è ü§î \n\n_–ü—Ä–∏–º–µ—Ä_\\: 01\\.01\\.2025", 
			parse_mode = "MarkdownV2")

		User.set_expected_type("date")

		return
	
	if User.expected_type == "reminder":
		if Message.text.isdigit():
			Events: dict = User.get_property("events")
			ReminderDict: dict = {"Reminder": Message.text}
			Events[User.get_property("EventsID")].update(ReminderDict)
			User.set_property("events", Events)
			User.set_expected_type(None)

			Bot.send_message(
				Message.chat.id,
				"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞! –ë—É–¥–µ–º –¥–µ—Ä–∂–∞—Ç—å —Ä—É–∫—É –Ω–∞ –ø—É–ª—å—Å–µ ü´°")
		else:
			Bot.send_message(
				Message.chat.id,
				"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!!!")
		return

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("remove_event"))
def InlineButtonRemoveEvent(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	EventID = Call.data.split("_")[-1]
	Events: dict = User.get_property("events")
	del Events[EventID]
	User.set_property("events", Events)

	Bot.delete_message(Call.message.chat.id, Call.message.id)
	if not User.get_property("events"):
		Bot.delete_message(Call.message.chat.id, User.get_property("ID_DelMessage"))
		User.clear_temp_properties()
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("remove_reminder"))
def InlineButtonRemoveReminder(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	EventID = Call.data.split("_")[-1]
	Events: dict = User.get_property("events")
	Name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text
	del Events[EventID]["Reminder"]

	User.set_property("events", Events)
	
	Bot.edit_message_text(
		f"*{Name}*",
		Call.message.chat.id,
		User.get_property("ID_EditMessage"),
		parse_mode = "MarkdownV2"
	)
	
	if not User.get_property("events"):
		Bot.delete_message(Call.message.chat.id, User.get_property("ID_DelMessage"))
		User.clear_temp_properties()

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("create_event"))
def InlineButtonCreateEvent(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	Bot.send_message(
		Call.message.chat.id, 
		"–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ç–∞–∫ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë—Ç–µ\\! üòâ \n\n_–ù–∞–ø—Ä–∏–º–µ—Ä_\\: –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
		parse_mode = "MarkdownV2"
	)
	User.set_expected_type("name")

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("choice_event"))
def InlineButtonChoiceEventToAddReminder(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	CountReminders = 0

	Events = User.get_property("events").copy()
	for EventID in Events.keys():
		if "Reminder" in Events[EventID].keys():
			CountReminders +=1

	if CountReminders < 10:
		EventsID = Call.data.split("_")[-1]
		Events: dict = User.get_property("events")
		Name = Markdown(Events[EventsID]["Name"]).escaped_text
		User.set_temp_property("EventsID", EventsID)

		Bot.send_message(
			Call.message.chat.id,
			f"–£–∫–∞–∂–∏—Ç–µ, –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–æ–±—ã—Ç–∏–∏ {Name}? üîä\n\n_–ü—Ä–∏–º–µ—Ä_\\: 10",
			parse_mode = "MarkdownV2"
		)
		User.set_expected_type("reminder")

	else: 
		Bot.send_message(
			Call.message.chat.id, 
			"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (>10).\n–£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("passed_days"))
def InlineButtonPassedDays(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	FreeID = Call.data.split("_")[-1]
	name = Markdown(User.get_property("events")[FreeID]["Name"]).escaped_text
	remains = Calculator(User.get_property("events")[FreeID]["Date"])

	Event: dict = User.get_property("events")
	Format: dict = {"Format": "Passed"}
	Event[FreeID].update(Format)
	User.set_property("events", Event)

	days = FormatDays(remains)

	Bot.send_message(
		Call.message.chat.id,
		text = f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\!\n\n–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *{name}* –ø—Ä–æ–∏–∑–æ—à–ª–æ {abs(remains)} {days} –Ω–∞–∑–∞–¥\\! ü´£", 
		parse_mode = "MarkdownV2"
		)
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("remained_days"))
def InlineButtonRemainedDays(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	FreeID = Call.data.split("_")[-1]
	name = Markdown(User.get_property("events")[FreeID]["Name"]).escaped_text
	newevent = Skinwalker(User.get_property("events")[FreeID]["Date"])
	remains = Calculator(newevent)

	Event: dict = User.get_property("events")
	Format: dict = {"Format": "Remained"}
	Event[FreeID].update(Format)
	User.set_property("events", Event)

	days = FormatDays(remains)

	Bot.send_message(
		Call.message.chat.id,
		f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\!\n\n–î–æ —Å–æ–±—ã—Ç–∏—è *{name}* –æ—Å—Ç–∞–ª–æ—Å—å {remains} {days}\\!", 
		parse_mode = "MarkdownV2"
		)

	Bot.answer_callback_query(Call.id)

Bot.polling(none_stop = True)
