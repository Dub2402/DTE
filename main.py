from Source.Instruments import Calculator, CheckValidDate, GetFreeID
from Source.InlineKeyboard import InlineKeyboard

from dublib.Methods.JSON import ReadJSON
from dublib.Methods.System import CheckPythonMinimalVersion, Clear
from dublib.Methods.Filesystem import MakeRootDirectories
from dublib.TelebotUtils import UsersManager
from dublib.Polyglot import Markdown
from telebot import types
from time import sleep

import telebot

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –≤–µ—Ä—Å–∏–∏ Python.
CheckPythonMinimalVersion(3, 10)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
MakeRootDirectories(["Data/Users"])
# –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏.
Clear()

Settings = ReadJSON("Settings.json")
Bot = telebot.TeleBot(Settings["token"])

Manager = UsersManager("Data/Users")
InlineKeyboardsBox = InlineKeyboard()

@Bot.message_handler(commands=["start"])
def ProcessCommandStart(Message: types.Message):
	User = Manager.auth(Message.from_user)

	try:
		User.get_property("events")
	except KeyError:
		User.set_property("events", {})

	Bot.send_message(Message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ —É–∫–∞–∑—ã–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –Ω–∏—Ö –æ—Å—Ç–∞–ª–æ—Å—å.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π.")

@Bot.message_handler(commands=["create"])
def ProcessCommandCreate(Message: types.Message):
	User = Manager.auth(Message.from_user)

	Bot.send_message(Message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ç–∞–∫ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë—Ç–µ üòâ")
	User.set_expected_type("name")

@Bot.message_handler(commands=["list"])
def ProcessCommandList(Message: types.Message):
	# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	User = Manager.auth(Message.from_user)

	if not User.get_property("events"):
		Bot.send_message(Message.chat.id, "–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create.")

	else:

		for EventID in User.get_property("events").keys():
			remains = Calculator(User.get_property("events")[EventID]["Date"])
			name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text
			days = "–¥–Ω–µ–π"

			if abs(remains) in [11, 12, 13]: pass
			elif str(remains).endswith("1"): days = "–¥–µ–Ω—å"
			elif str(remains).endswith("2") or str(remains).endswith("3") or str(remains).endswith("4"): days = "–¥–Ω—è"

			if remains == 0:
				Bot.send_message(
					Message.chat.id,
					f"–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *{name}* —Å–µ–≥–æ–¥–Ω—è\\.",
					reply_markup = InlineKeyboardsBox.RemoveEvent(EventID),
					parse_mode = "MarkdownV2")

			else:
				remains = Markdown(str(remains)).escaped_text
				Bot.send_message(
					Message.chat.id, f"–î–æ —Å–æ–±—ã—Ç–∏—è *{name}* –æ—Å—Ç–∞–ª–æ—Å—å {remains} {days}\\.",
					reply_markup = InlineKeyboardsBox.RemoveEvent(EventID),
					parse_mode = "MarkdownV2"
				)
			sleep(0.15)
		

@Bot.message_handler(content_types=["text"])
def ProcessText(Message: types.Message):
	User = Manager.auth(Message.from_user)
	
	if User.expected_type == "date":
		name = Markdown(User.get_property("date")).escaped_text
		if CheckValidDate(Message.text) == True:
			Date = Message.text
			Events = User.get_property("events")
			FreeID = GetFreeID(Events)
			Events[FreeID] = {"Name": User.get_property("date"), "Date": Date}
			User.set_property("events", Events)
			Bot.send_message(
				Message.chat.id,
				text = f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\! –¢–µ–ø–µ—Ä—å –±—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *{name}* –≤–º–µ—Å—Ç–µ\\! üòä", 
				parse_mode = "MarkdownV2"
				)
			
			User.clear_temp_properties()
			User.set_expected_type(None)

		else:
			Bot.send_message(
				Message.chat.id, 
				"–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
				)

		return

	elif User.expected_type == "name":
		Name = Message.text
		User.set_temp_property("date", Name)
		Bot.send_message(Message.chat.id, "–ê —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–∞—Ç–∞ –≤–∞—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è. \n\n–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –ì–ì–ì–ì-–ú–ú-–î–î")

		User.set_expected_type("date")

		return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline-–∫–Ω–æ–ø–∫–∏: —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.
@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("remove_event"))
def InlineButton(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	
	EventsID = Call.data.split("_")[-1]
	Events: dict = User.get_property("events")
	del Events[EventsID]

	User.set_property("events", Events)
	Bot.delete_message(Call.message.chat.id, Call.message.id)
	
	# –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å.
	Bot.answer_callback_query(Call.id)

Bot.polling(none_stop = True)
