from Source.Instruments import Calculator, CheckValidDate, GetFreeID
from Source.InlineKeyboards import InlineKeyboards
from Source.ReplyKeyboard import ReplyKeyboard

from dublib.Methods.JSON import ReadJSON
from dublib.Methods.System import CheckPythonMinimalVersion, Clear
from dublib.Methods.Filesystem import MakeRootDirectories
from dublib.TelebotUtils import UsersManager
from dublib.Polyglot import Markdown
from telebot import types
from time import sleep

import telebot

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –≤–µ—Ä—Å–∏–∏ Python.
CheckPythonMinimalVersion(3, 10)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
MakeRootDirectories(["Data/Users"])
# –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏.
Clear()

Settings = ReadJSON("Settings.json")
Bot = telebot.TeleBot(Settings["token"])

Manager = UsersManager("Data/Users")
InlineKeyboardsBox = InlineKeyboards()
ReplyKeyboardBox = ReplyKeyboard()

@Bot.message_handler(commands=["start"])
def ProcessCommandStart(Message: types.Message):
	User = Manager.auth(Message.from_user)

	try:
		User.get_property("events")
	except KeyError:
		User.set_property("events", {})
	Bot.send_message(
		Message.chat.id, 
		"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ —É–∫–∞–∑—ã–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –Ω–∏—Ö –æ—Å—Ç–∞–ª–æ—Å—å."
		)
	sleep(0.5)
	Bot.send_message(
		Message.chat.id, 
		"–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è! ü§ó")
	User.set_expected_type("call")
	
@Bot.message_handler(content_types = ["text"], regexp = "–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ")
def ProcessTextNewEvent(Message: types.Message):
	User = Manager.auth(Message.from_user)

	Bot.send_message(
		Message.chat.id, 
		"–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ç–∞–∫ —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë—Ç–µ\\! üòâ \n\n_–ù–∞–ø—Ä–∏–º–µ—Ä_\\: –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
			parse_mode = "MarkdownV2"
		)
	User.set_expected_type("name")

@Bot.message_handler(content_types = ["text"], regexp = "–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è")
def ProcessTextMyEvents(Message: types.Message):
	# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	User = Manager.auth(Message.from_user)

	if not User.get_property("events"):
		Bot.send_message(
			Message.chat.id, 
			"–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è üôÑ\n–ù—É–∂–Ω–æ —ç—Ç–æ –¥–µ–ª–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å\\!\\)\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É *–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ*\\.",
			parse_mode = "MarkdownV2"
			)

	else:
		somedict = User.get_property("events").copy()
		for EventID in somedict.keys():
			remains = Calculator(User.get_property("events")[EventID]["Date"])
			name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text
			days = "–¥–Ω–µ–π"

			if abs(remains) in [11, 12, 13]: pass
			elif str(remains).endswith("1"): days = "–¥–µ–Ω—å"
			elif str(remains).endswith("2") or str(remains).endswith("3") or str(remains).endswith("4"): days = "–¥–Ω—è"

			if remains == 0:
				Bot.send_message(
					Message.chat.id,
					f"–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *{name}* —Å–µ–≥–æ–¥–Ω—è\\.",
					reply_markup = InlineKeyboardsBox.RemoveEvent(EventID),
					parse_mode = "MarkdownV2")

			elif remains > 0:
				remains = Markdown(str(remains)).escaped_text
				call = Markdown(str(User.get_property("call"))).escaped_text
				Bot.send_message(
					Message.chat.id, f"{call}, –¥–æ —Å–æ–±—ã—Ç–∏—è *{name}* –æ—Å—Ç–∞–ª–æ—Å—å {remains} {days}\\!\n\n–î–æ–∂–¥—ë–º—Å—è\\!\\!\\!",
					reply_markup = InlineKeyboardsBox.RemoveEvent(EventID),
					parse_mode = "MarkdownV2"
				)
			else:
				remains = Markdown(str(abs(remains))).escaped_text
				call = Markdown(str(User.get_property("call"))).escaped_text
				Bot.send_message(
					Message.chat.id, f"{call}, —Å–æ–±—ã—Ç–∏–µ *{name}* –±—ã–ª–æ {remains} {days} –Ω–∞–∑–∞–¥\\!",
					reply_markup = InlineKeyboardsBox.RemoveEvent(EventID),
					parse_mode = "MarkdownV2"
				)
			sleep(0.15)
		
@Bot.message_handler(content_types = ["text"], regexp = "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏")
def ProcessShareWithFriends(Message: types.Message):
	User = Manager.auth(Message.from_user)

	Bot.send_message(
		Message.chat.id, 
		text='–õ—É—á—à–∏–π –±–æ—Ç –¥–ª—è –æ—Ç—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–Ω–µ–π –¥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ ü•≥\n\n@SleepFox789_TestBot\n\n–ü–æ–ª—å–∑—É–π—Å—è –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ!)', 
		reply_markup=InlineKeyboardsBox.AddShare()
		)

	User.set_expected_type("name")

@Bot.message_handler(content_types=["text"])
def ProcessText(Message: types.Message):
	User = Manager.auth(Message.from_user)
	if User.expected_type == "call":
		User.set_property("call", Message.text)

		Bot.send_message(
		Message.chat.id,
		"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É.",
		reply_markup = ReplyKeyboardBox.AddMenu(User)
		)
		return
	
	if User.expected_type == "date":
		name = Markdown(User.get_property("date")).escaped_text
		if CheckValidDate(Message.text) == True:
			Date = Message.text
			Events = User.get_property("events")
			FreeID = str(GetFreeID(Events))
			Events[FreeID] = {"Name": User.get_property("date"), "Date": Date}
			User.set_property("events", Events)
			remains = Calculator(User.get_property("events")[FreeID]["Date"])
			if remains > 0:
				Bot.send_message(
					Message.chat.id,
					text = f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\! –¢–µ–ø–µ—Ä—å –±—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *{name}* –≤–º–µ—Å—Ç–µ\\! üòä", 
					parse_mode = "MarkdownV2"
					)
			elif remains == 0:
				Bot.send_message(
					Message.chat.id,
					text = f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\! –í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *{name}* —Å–µ–≥–æ–¥–Ω—è\\!\\!\\! üòä", 
					parse_mode = "MarkdownV2"
					)
			else: 
				Bot.send_message(
					Message.chat.id,
					text = f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\! –í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *{name}* —É–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ\\! üòä", 
					parse_mode = "MarkdownV2"
					)
			User.clear_temp_properties()
			User.set_expected_type(None)

		else:
			Bot.send_message(
				Message.chat.id, 
				"–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
				)

		return

	elif User.expected_type == "name":
		Name = Message.text
		User.set_temp_property("date", Name)
		Bot.send_message(
			Message.chat.id,
			"–ê —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–∞—Ç–∞ –≤–∞—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è ü§î \n\n–ü—Ä–∏–º–µ—Ä\\: 01\\.01\\.2025", 
			parse_mode = "MarkdownV2")

		User.set_expected_type("date")

		return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline-–∫–Ω–æ–ø–∫–∏: —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.
@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("remove_event"))
def InlineButton(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	
	EventsID = Call.data.split("_")[-1]
	Events: dict = User.get_property("events")
	print(Events)
	del Events[EventsID]

	User.set_property("events", Events)
	Bot.delete_message(Call.message.chat.id, Call.message.id)
	
	# –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å.
	Bot.answer_callback_query(Call.id)

Bot.polling(none_stop = True)
