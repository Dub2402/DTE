from dublib.Engine.GetText import GetText
from Source.Functions import FormatDays, Skinwalker, Calculator, CheckValidDate, GetValidTime, LimitationOnceReminders
from Source.Bot_Addition import *
from Source.TeleBotAdminPanel import Panel
from Source.InlineKeyboards import InlineKeyboard
from Source.ReplyKeyboard import ReplyKeyboard
from Source.Mailer import Mailer
from Source.Modules.Mode import Modes

from Source.Timezoner import TimezonerInlineKeyboards, TimezonerDecorators, CorrectUserTime, Replacing_timezone
import Source.AdminPanelExtensions
import Source.AdditionalColumns

from dublib.Methods.Filesystem import ReadJSON
from dublib.Methods.System import CheckPythonMinimalVersion, Clear
from dublib.TelebotUtils import UsersManager
from dublib.TelebotUtils.Cache import TeleCache
from dublib.TelebotUtils.Master import TeleMaster

import telebot
import logging
from telebot import types
from time import sleep
from datetime import datetime, timezone
from apscheduler.schedulers.background import BackgroundScheduler

CheckPythonMinimalVersion(3, 10)
Clear()

logging.basicConfig(level=logging.INFO, encoding="utf-8", filename="LOGING.log", filemode="w",
	format='%(asctime)s - %(levelname)s - %(message)s',
	datefmt='%Y-%m-%d %H:%M:%S')

logging.getLogger("pyTelegramBotAPI").setLevel(logging.WARNING)
logging.getLogger("requests").setLevel(logging.WARNING)

Settings = ReadJSON("Settings.json")

GetText.initialize("DTE", Settings["language"], "locales")
_ = GetText.gettext

Bot = telebot.TeleBot(Settings["token"])
telemaster = TeleMaster(Settings["token"])
Manager = UsersManager("Data/Users")
reply_keyboard = ReplyKeyboard()
inline_keyboard = InlineKeyboard()
AdminPanel = Panel()
Cacher = TeleCache()
modes = Modes(Manager, Bot)

Cacher.set_bot(Bot)
Cacher.set_chat_id(Settings["chat_id"])
scheduler = BackgroundScheduler()

mailer = Mailer(Bot, Manager, Settings["language"])

scheduler.add_job(mailer.Start, 'cron', hour = Settings["start_remindering"].split(":")[0], minute = Settings["start_remindering"].split(":")[1], args = [["MessagesDaily", "MessagesTodayDefault"]])
scheduler.add_job(mailer.Start, 'cron', hour = '*', minute = '*', args = [["MessagesOnce", "MessagesTodaywithTime"]])
scheduler.start()

AdminPanel.decorators.commands(Bot, Manager, Settings["password"])

Manager.clear_temp_properties()

@Bot.message_handler(commands = ["start"])
def ProcessCommandStart(Message: types.Message):
	""" 
	–°–æ–∑–¥–∞–Ω–∏–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ñ–∞–π–ª–µ "New_User", –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –Ω–∞–∂–∞–ª /start.
		–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
	"""

	if not Manager.is_user_exists(Message.from_user.id):
		User = Manager.auth(Message.from_user)
		User.set_property("New_User", True)

	User = Manager.auth(Message.from_user)
	User.set_property("events", {}, False)
	User.set_property("emoji", False)
	User.set_expected_type(None)
	
	try:
		StartID = Cacher.get_real_cached_file(Settings["start_jpg"], types.InputMediaPhoto)
		Bot.send_photo(
			Message.chat.id, 
			photo = StartID.file_id,
			caption = _("<b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨!</b>\n\n–Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ —É–∑–Ω–∞–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –Ω–∏—Ö –æ—Å—Ç–∞–ª–æ—Å—å."),
			parse_mode = "HTML"
		)
	except Exception as E: print(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞, –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª Settings.json {E}")
		
	if User.has_property("call"):
		call = User.get_property("call")
		Bot.send_message(
			Message.chat.id, 
			call + _(", –º—ã —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞! ü§ó"),
			reply_markup = reply_keyboard.AddMenu()
			)
	else:
		Bot.send_message(
			Message.chat.id, 
			_("–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è! ü§ó")
			)
		User.set_expected_type("call")

AdminPanel.decorators.reply_keyboards(Bot, Manager)

@Bot.message_handler(commands = ["infa"])
def ProcessInfa(Message: types.Message):

	User = Manager.auth(Message.from_user)
	Text = (_("@Dnido_bot –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–Ω–µ–π, –∞ —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!\n"),
	_("<b>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:</b>\n- –û—Ç—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–Ω–∏ –î–û —Å–æ–±—ã—Ç–∏—è"),
	_("- –û—Ç—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–Ω–∏ –ü–û–°–õ–ï —Å–æ–±—ã—Ç–∏—è"),
	_("- –°—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –¥–µ–Ω—å –≤ –¥–µ–Ω—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"),
	_("- –°—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –¥–µ–Ω—å –≤ –¥–µ–Ω—å –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ 7 —É—Ç—Ä–∞)"),
	_("- –°—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"),
	_("–ù–∞ –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç)\n"),
	_("<b><i>–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å, –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏!</i></b>")
	)
	MessageInfo = Bot.send_message(
		Message.chat.id,
		text = "\n".join(Text),
		parse_mode = "HTML",
		reply_markup = inline_keyboard.SteakActions(name_button = _("–Ø—Å–Ω–µ–Ω—å–∫–æ"), delete = "MessageInfo")
	)
	User.set_temp_property("MessageInfo", MessageInfo.id)

@Bot.message_handler(content_types = ["text"], regexp = "‚úèÔ∏è "+ _("–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"))
def ProcessTextNewEvent(Message: types.Message):
	"""–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""

	User = Manager.auth(Message.from_user)
	text = _("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ç–∞–∫ –∂–¥—ë—Ç–µ!")
	MessageWaitingName(Bot, Message, inline_keyboard, User, text)

@Bot.message_handler(content_types = ["text"], regexp = _("üõé –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"))
def ProcessSettingsReminders(Message: types.Message):
	User = Manager.auth(Message.from_user)
	
	MessageSettings = Bot.send_message(
		Message.chat.id, 
		_("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"),
		reply_markup = inline_keyboard.SettingsMenu())

	SaveMessageID(User, MessageSettings.id, ["MessageSettings"])
	
@Bot.message_handler(content_types = ["text"], regexp = "üìú " + _(" –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è"))
def ProcessTextMyEvents(Message: types.Message):
	User = Manager.auth(Message.from_user)

	if not User.get_property("events"):
		Bot.send_message(
			Message.chat.id, 
			_("–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è üôÑ\n–ù—É–∂–Ω–æ —ç—Ç–æ –¥–µ–ª–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!)"),
			parse_mode = "HTML", 
			reply_markup = inline_keyboard.AddNewEvent()
			)
		
	else:
		call = User.get_property("call")
		Events: dict = User.get_property("events").copy()
		DeleteMessage = Bot.send_message(
					Message.chat.id,
					_("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, %s!") % call, 
					parse_mode = "HTML")
		SaveMessageID(User, DeleteMessage.id, ["MessagesMyEvents"])
		number_event = 1

		for EventID in Events.keys():
			remains = Calculator(User.get_property("events")[EventID]["Date"])
			name = GetPropertyEvent(User, "Name", EventID)
			days = FormatDays(remains, Settings["language"])

			if remains == 0:
				DeleteMessage = Bot.send_message(
					Message.chat.id,
					_("–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ <b>%s</b> —Å–µ–≥–æ–¥–Ω—è.") % name,
					parse_mode = "HTML",
					reply_markup = inline_keyboard.RemoveEvent(EventID))
				SaveMessageID(User, DeleteMessage.id, ["MessagesMyEvents"])

			elif remains > 0:
				DeleteMessage = Bot.send_message(
					Message.chat.id,
					f"{number_event}) " + _("<b>%s</b> –Ω–∞—Å—Ç—É–ø–∏—Ç —á–µ—Ä–µ–∑ %s %s!") % (name, remains, days),
					parse_mode = "HTML",
					reply_markup = inline_keyboard.RemoveEvent(EventID))
				SaveMessageID(User, DeleteMessage.id, ["MessagesMyEvents"])
				
			else:
				if Events[EventID]["Format"] == "Passed":
					remains = str(abs(remains))
					DeleteMessage = Bot.send_message(
						Message.chat.id,
						f"{number_event}) " + _("–°–æ–±—ã—Ç–∏–µ <b>%s</b> –±—ã–ª–æ %s %s –Ω–∞–∑–∞–¥!") % (name, remains, days),
						parse_mode = "HTML",
						reply_markup = inline_keyboard.RemoveEvent(EventID))
					SaveMessageID(User, DeleteMessage.id, ["MessagesMyEvents"])

				if Events[EventID]["Format"] == "Remained":
					newdate = Skinwalker(User.get_property("events")[EventID]["Date"])
					remainsnew = Calculator(newdate)
					days = FormatDays(remainsnew, Settings["language"])
					if remainsnew == 0:
						DeleteMessage = Bot.send_message(
							Message.chat.id,
							f"{number_event}) " + _("–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ <b>%s</b> —Å–µ–≥–æ–¥–Ω—è.") % name,
							parse_mode = "HTML",
							reply_markup = inline_keyboard.RemoveEvent(EventID))
						SaveMessageID(User, DeleteMessage.id, ["MessagesMyEvents"])
						
					else:
						DeleteMessage = Bot.send_message(
							Message.chat.id, 
							f"{number_event}) " + _("<b>%s</b> –Ω–∞—Å—Ç—É–ø–∏—Ç —á–µ—Ä–µ–∑ %s %s!") % (name, remainsnew, days),
							parse_mode = "HTML",
							reply_markup = inline_keyboard.RemoveEvent(EventID))
						SaveMessageID(User, DeleteMessage.id, ["MessagesMyEvents"])
			number_event += 1 		
			sleep(0.1)
		DeleteMessage = Bot.send_message(
						Message.chat.id,
						_("–•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è!)"),
						reply_markup = inline_keyboard.SendEmoji("‚ù§Ô∏è", "events")
						)
		SaveMessageID(User, DeleteMessage.id, ["MessagesMyEvents"])

@Bot.message_handler(content_types = ["text"], regexp = _("üëÑ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"))
def ProcessShareWithFriends(Message: types.Message):
	User = Manager.auth(Message.from_user)
	try:
		ShareID = Cacher.get_real_cached_file(Settings["share_image_path"], types.InputMediaPhoto)
		Bot.send_photo(
			Message.chat.id, 
			photo = ShareID.file_id,
			caption = _("@Dnido_bot\n@Dnido_bot\n@Dnido_bot\n\n–ü—Ä–æ—Å—Ç–æ <b>–¢-—Ç-—Ç–æ–ø–æ–≤—ã–π</b> –±–æ—Ç –¥–ª—è –æ—Ç—Å—á—ë—Ç–∞ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏–π ü•≥\n\n<b><i>–ü–æ–ª—å–∑—É–π—Å—è –∏ –¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</i></b>"), 
			reply_markup = inline_keyboard.AddShare(),
			parse_mode = "HTML" 
			)
	except Exception as E: print(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞ share_image: {E}")

@Bot.message_handler(content_types = ["text"])
def ProcessText(Message: types.Message):
	User = Manager.auth(Message.from_user)
	if AdminPanel.procedures.text(Bot, Manager, Message): return

	if User.expected_type == "call":
		SaveMessageID(User, Message.id, ["Changename"])
		User.set_property("call", Message.text)
		User.set_expected_type(None)

		Changename = Bot.send_message(
			Message.chat.id,
			_("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, %s!") % Message.text,
			reply_markup = reply_keyboard.AddMenu()
			)
		SaveMessageID(User, Changename.id, ["Changename"])
		Changename = Bot.send_message(
			Message.chat.id,
			_("–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –ø–æ–ª. –≠—Ç–æ –¥–ª—è –ª—É—á—à–µ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –±–æ—Ç–∞ –ø–æ–¥ –≤–∞—Å:"),
			reply_markup = inline_keyboard.ChoiceGender()
			)
		SaveMessageID(User, Changename.id, ["Changename"])
		
		return
	
	if User.expected_type == "name":
		User.set_temp_property("Name", Message.text)

		Bot.send_message(
			Message.chat.id,
			_("–ê —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–∞—Ç–∞ –≤–∞—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è ü§î \n\n<i>–ü—Ä–∏–º–µ—Ä: 01.01.2000</i>"), 
			parse_mode = "HTML")
		User.set_expected_type("date")

		return
	
	if User.expected_type == "date":
		if CheckValidDate(Message.text) == True:
			User.set_temp_property("Date", Message.text)
			remains = Calculator(Message.text)
			User.set_expected_type(None)
			User.set_temp_property("Format", "Remained")
			New_User = False
			if User.has_property("New_User"): 
				New_User = True
				User.remove_property("New_User")
			DeleteMessageNotification = SendFormatReminders(Bot, inline_keyboard, Message, New_User)
			SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
		else:
			Bot.send_message(
				Message.chat.id, 
				_("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
				)
		return
	
	if User.expected_type == "reminder&time":
		FreeID = User.get_property("EventID")
		SaveMessageID(User, Message.id, ["MessageNotificationsChange", "TextUserreminder&time" ])
		User.set_temp_property("ReminderFormat", "OnceDay")
		Modificated_message = Message.text.replace(":", "").replace(" ", "")
		Reminder_piece = Message.text.split(" ")[0].lstrip("0")
		if not Reminder_piece: 
			SendErrorInput(Bot = Bot, User = User, Message = Message, expected_type = "reminder&time")
			return
		Time_piece = Message.text.split(" ")[-1]
		
		try:
			if User.has_property("Name"): Name = User.get_property("Name")
			else: Name = GetPropertyEvent(User, "Name", FreeID)

			if User.has_property("Date"): remains = LimitationOnceReminders(User.get_property("Date"))
			else: remains = LimitationOnceReminders(GetPropertyEvent(User, "Date", FreeID))

			Days_Reminder_piece = FormatDays(int(Reminder_piece), Settings["language"])
			Days_Remains = FormatDays(remains, Settings["language"])

			if Modificated_message.isdigit() and int(Reminder_piece) >= 1 and int(Reminder_piece) <= remains and Time_piece.count(":") == 1:
				if len(Time_piece) >= 3 and len(Time_piece) <= 5:
					Time = GetValidTime(Time_piece)
					
					if int(Reminder_piece) == remains: 
						Delta = Replacing_timezone(User)
						UserTime = CorrectUserTime(Time, Delta)

						if UserTime <= datetime.now(timezone.utc).replace(microsecond=0): 
							type_mistake = _("–û–π-–æ–π, –∞ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è <b>$Time_piece</b> –¥–ª—è —Å–æ–±—ã—Ç–∏—è <b>$Name</b> –ø—Ä–æ—à–ª–æ...\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –≤–∞—Å üòî").replace("$Name", Name).replace("$Time_piece", Time_piece)
							SendErrorInput(Bot = Bot, User = User, Message = Message, expected_type = "reminder&time", text = type_mistake)
							return
					
					if not User.has_property("Name"): 
						Data = {"Reminder": Reminder_piece, "ReminderFormat": "OnceDay", "Time": Time}
						SetPropertyEvent(User, Data, FreeID)

					else: 
						User.set_temp_property("ReminderFormat", "OnceDay")
						User.set_temp_property("Reminder", Reminder_piece)
						User.set_temp_property("Time", Time)
						Data = GetDataEvent(User)
						SetDataEvent(User, Data, FreeID)

					if User.has_property("Oncereminders_button"):
						if User.get_property("Oncereminders_button") == "start": button = inline_keyboard.Saving(["notSave", "Save"], _("–°–ø–∞—Å–∏–±–æ!"))
						if User.get_property("Oncereminders_button") == "new": button = inline_keyboard.SteakActions(name_button = _("–°–ø–∞—Å–∏–±–æ!"), delete = "MessageNotificationsChange", update = "OnceDay")
						if User.get_property("Oncereminders_button") == "change": button = inline_keyboard.SteakActions(name_button = _("–°–ø–∞—Å–∏–±–æ!"), delete = "MessageNotificationsChange", update = "AllReminders")

						DeleteMessageNotification = Bot.send_message(
							Message.chat.id, 
							_("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–ú—ã –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏–º –æ —Å–æ–±—ã—Ç–∏–∏ <b>$Name</b> –≤ <b>$Time</b> –∑–∞ <b>$Reminder $Days</b>!").replace("$Name", Name).replace("$Time", Time).replace("$Reminder", Reminder_piece).replace("$Days", Days_Reminder_piece),
							parse_mode = "HTML",
							reply_markup = button
							)
						SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])

				else: SendErrorInput(Bot = Bot, User = User, Message = Message, expected_type = "reminder&time")
			else: 
				type_mistake = "–û–π-–æ–π, –∞ –¥–æ –≤–∞—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è <b>$Name</b> –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ <b>$remains</b> $Days_Remains...\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ –Ω–∞ <b>$Reminder_piece</b> $Days_Reminder_piece –Ω–∞–∑–∞–¥ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –≤–∞—Å üòî".replace("$Reminder_piece", Reminder_piece).replace("$Name", Name).replace("$remains", str(remains)).replace("$Days_Reminder_piece", Days_Reminder_piece).replace("$Days_Remains", Days_Remains)
				SendErrorInput(Bot = Bot, User = User, Message = Message, expected_type = "reminder&time", text = type_mistake)

		except ZeroDivisionError:
			SendErrorInput(Bot = Bot, User = User, Message = Message, expected_type = "reminder&time")
		return
	
	if User.expected_type == "time":
		button = inline_keyboard.SteakActions(name_button = _("–°–ø–∞—Å–∏–±–æ!"), delete = "MessageNotificationsChange", update = "OnceDay")
		SaveMessageID(User, Message.id, ["MessageNotificationsChange"])
		TimeModificated = Message.text.replace(":", "").replace(" ", "")
		if TimeModificated.isdigit() and Message.text.count(":") == 1 and len(Message.text) >= 3 and len(Message.text) <= 5:
			try:
				Time = GetValidTime(Message.text)
				FreeID = User.get_property("EventID")

				if User.has_property("Date"): remains = LimitationOnceReminders(User.get_property("Date"))
				else: remains = LimitationOnceReminders(GetPropertyEvent(User, "Date", FreeID))

				if User.has_property("Name"): User.get_property("Name")
				else: Name = GetPropertyEvent(User, "Name", FreeID)
				
				if remains == 0: 
					Delta = Replacing_timezone(User)
					UserTime = CorrectUserTime(Time, Delta)

					if UserTime <= datetime.now(timezone.utc).replace(microsecond=0): 
						type_mistake = _("–û–π-–æ–π, –∞ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è <b>$Time_piece</b> –¥–ª—è —Å–æ–±—ã—Ç–∏—è <b>$Name</b> –ø—Ä–æ—à–ª–æ...\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –≤–∞—Å üòî").replace("$Name", Name).replace("$Time_piece", Time)
						SendErrorInput(Bot = Bot, User = User, Message = Message, expected_type = "time", text = type_mistake)
						return

				if not User.has_property("Name"): 
					Data = {"Reminder": "0", "ReminderFormat": "OnceDay", "Time": Time}
					SetPropertyEvent(User, Data, FreeID)

				else: 
					User.set_temp_property("Reminder", "0")
					User.set_temp_property("ReminderFormat", "OnceDay")
					User.set_temp_property("Time", Message.text)
					Data = GetDataEvent(User)
					SetDataEvent(User, Data, FreeID)

				Name = GetPropertyEvent(User, "Name", FreeID)

				if User.has_property("Oncereminders_button"):
						if User.get_property("Oncereminders_button") == "start": button = inline_keyboard.Saving(["Save"], _("–°–ø–∞—Å–∏–±–æ"))
						if User.get_property("Oncereminders_button") == "new": button = inline_keyboard.SteakActions(name_button = _("–°–ø–∞—Å–∏–±–æ!"), delete = "MessageNotificationsChange", update = "OnceDay")
						if User.get_property("Oncereminders_button") == "change": button = inline_keyboard.SteakActions(name_button = _("–°–ø–∞—Å–∏–±–æ!"), delete = "MessageNotificationsChange", update = "AllReminders")

				DeleteMessageNotification = Bot.send_message(
					Message.chat.id, 
					_("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–ú—ã –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏–º –æ —Å–æ–±—ã—Ç–∏–∏ <b>$Name</b> –≤ <b>$Time –¥–µ–Ω—å –≤ –¥–µ–Ω—å!</b>").replace("$Name", Name).replace("$Time", Time),
					parse_mode = "HTML",
					reply_markup = button
				)
				SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
			except ZeroDivisionError: SendErrorInput(Bot = Bot, User = User, Message = Message, expected_type = "time")
		else:
			SendErrorInput(Bot = Bot, User = User, Message = Message, expected_type = "time")
		return

AdminPanel.decorators.inline_keyboards(Bot, Manager)
modes.decorators.inline_keyboards()

TimezonerDecorators(Bot, Manager, inline_keyboard)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Gender"))
def InlineButtonsChoiceGender(Call: types.CallbackQuery):
	"""
	–ó–∞–¥–∞—ë–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∑–∞–ø—Ä–æ—Å–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.
	"""

	User = Manager.auth(Call.from_user)
	Gender = Call.data.split("_")[-1]
	User.set_property("Gender", Gender)

	User.set_expected_type("timezone")
	Call_user = User.get_property("call")
	if User.has_property("emoji") and User.get_property("emoji"):
		if User.has_property("Gender") and User.get_property("Gender") == "man": Gender_text = _("–ù–∞—à –º—É–∂—á–∏–Ω–∞")
		else: Gender_text = _("–ù–∞—à–∞ –∂–µ–Ω—â–∏–Ω–∞")
	
		Changename =  Bot.send_message(
		chat_id = Call.message.chat.id,
		text = _("–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ! $gender_text, $name!)").replace("$gender_text", Gender_text).replace("$name", Call_user),
		parse_mode = "HTML",
		reply_markup = inline_keyboard.SendEmoji("ü§ó")
	)
		SaveMessageID(User, Changename.id, ["Changename"])
	else:
		Bot.delete_message(Call.message.chat.id, Call.message.id)		
		Bot.send_message(
			chat_id = Call.message.chat.id,
			text = _("–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ!\n\n–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –°–∫–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏ —É –≤–∞—Å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ? üïê"),
			parse_mode = "HTML",
			reply_markup = TimezonerInlineKeyboards().timezone_first_page()
		)
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Format"))
def InlineButtonsFormatDays(Call: types.CallbackQuery):
	"""
	–ó–∞–¥–∞—ë–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è (Remained/Passed).
	–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–∏–¥–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ä–∞–∑–æ–≤–æ–µ/–æ—Ç—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–Ω–∏).
	"""

	User = Manager.auth(Call.from_user)
	EventID = User.get_property("EventID")
	Format = Call.data.split("_")[-1]

	if isEventExist(User, EventID): 
		Name = GetPropertyEvent(User, "Name", EventID)
		Date = GetPropertyEvent(User, "Date", EventID)
		SetPropertyEvent(User, {"Format": Format}, EventID)
	else: 
		Name = User.get_property("Name")
		Date = User.get_property("Date")
		Data = GetDataEvent(User)
		SetDataEvent(User, Data, EventID)
	
	if Format == "Remained":
		skinwalker = Skinwalker(Date)
		remains = str(Calculator(skinwalker))
		days = FormatDays(remains, Settings["language"])
		DeleteMessageNotification = Bot.send_message(
			chat_id = Call.message.chat.id,
			text = _("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–î–æ —Å–æ–±—ã—Ç–∏—è <b>$Name</b> –æ—Å—Ç–∞–ª–æ—Å—å $remains $days!\n\n–ë—É–¥–µ–º –∂–¥–∞—Ç—å –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å <u>–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏!</u> üõé").replace("$Name", Name).replace("$remains", remains).replace("$days" ,days),
			reply_markup = inline_keyboard.SettingsNotifications(EventID, Send = "SendMessagewithEmoji"),
			parse_mode = "HTML"
		)
		SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])

	if Format == "Passed":

		remains = str(abs(Calculator(Date)))
		days = FormatDays(remains, Settings["language"])
		DeleteMessageNotification = Bot.send_message(
			chat_id = Call.message.chat.id,
			text = _("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ <b>$Name</b> –ø—Ä–æ–∏–∑–æ—à–ª–æ $remains $days –Ω–∞–∑–∞–¥!").replace("$Name", Name).replace("$remains", remains).replace("$days", days),
			parse_mode = "HTML"
		)
		SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("AnotherDay"))
def InlineButtonAnotherDay(Call: types.CallbackQuery):
	"""
	–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
	"""
	
	User = Manager.auth(Call.from_user)
	if User.has_property("Name"): Name = User.get_property("Name")
	else:
		FreeID = User.get_property("EventID")
		Name = GetPropertyEvent(User, "Name", FreeID)
	DeleteMessageNotification = Bot.send_message(
		Call.message.chat.id,
		_("–£–∫–∞–∂–∏—Ç–µ, –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∏ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–æ–±—ã—Ç–∏–∏ <b>$Name</b>? üîä\n\n<i>–ü—Ä–∏–º–µ—Ä: 10 18:30 (–æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞ 10 –¥–Ω–µ–π –∏ –≤ 18:30)</i>").replace("$Name", Name),
		parse_mode = "HTML"
	)

	User.set_expected_type("reminder&time")
	SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Save"))
def InlineButtonsSave(Call: types.CallbackQuery):
	"""
	–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π (—Ä–∞–∑–æ–≤–æ–µ –∑–∞ n-–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è), –∞ —Ç–∞–∫–∂–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–∞–∑–æ–≤–æ–µ –∑–∞ –¥–µ–Ω—å –¥–æ —Å–æ–±—ã—Ç–∏—è).
	–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ñ–∞–π–ª–µ.
	"""

	User = Manager.auth(Call.from_user)
	Saving = Call.data.split("_")[1]
	
	if Saving.startswith("yes"):
		if Saving == "yes":
			SendMessagewithEmoji(Bot, Call, inline_keyboard)
		
		else:
			Reaction = Saving.replace("yes","")
			PutReaction(Bot, Call, Reaction)

		User.clear_temp_properties()
		User.set_expected_type(None)
	else: 
		# ? –ù—É–∂–Ω–æ –ª–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É–¥–∞–ª—è—Ç—å —á—Ç–æ-–ª–∏–±–æ, –∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å User.set_expected_type(None) ???????
		Delete = Call.data.split("_")[2]
		Bot.delete_message(Call.message.chat.id, Call.message.id)
		DeleteMessageID(User, Call, telemaster, "TextUserreminder&time")
		if Delete:
			DeleteMessageID(User, Call, telemaster, Delete)
			User.set_expected_type(None)

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("create_event"))
def InlineButtonCreateEvent(Call: types.CallbackQuery):
	"""–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""

	User = Manager.auth(Call.from_user)
	text = _("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ç–∞–∫ –∂–¥—ë—Ç–µ! üòâ \n\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</i>")
	MessageWaitingName(Bot, Call.message, inline_keyboard, User, text, isbutton = False)

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("remove_event"))
def InlineButtonRemoveEvent(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	EventID = Call.data.split("_")[-1]
	DeleteEvent(User, EventID)
	DeleteMessageID(User, Call, telemaster, "MessagesMyEvents")

	if User.get_property("events"):
		ProcessTextMyEvents(Call.message)

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Delete_reminder"))
def ProcessDeleteReminder(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	CountReminder = 0
	somedict: dict = User.get_property("events").copy()

	if User.get_property("events"):

		for EventID in somedict.keys():
			if User.get_property("events")[EventID]["ReminderFormat"] != "WithoutReminders":
				CountReminder += 1
		
		if CountReminder < 1:
			DeleteMessageNotification = Bot.send_message(
				Call.message.chat.id, 
				_("–£ –≤–∞—Å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
				)
			SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsDeactivate"])
		else:
			DeleteMessageNotification = Bot.send_message(
						Call.message.chat.id,
						_("–í–ê–®–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø:"))
			SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsDeactivate"])

			number_event = 1
			for EventID in somedict.keys():
				Name = GetPropertyEvent(User, "Name", EventID)
			
				if somedict[EventID]["ReminderFormat"] == "EveryDay":
					DeleteMessageNotification = Bot.send_message(
					Call.message.chat.id,
					f"{number_event}) " + _("<b>%s</b>\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!") % Name,
					reply_markup = inline_keyboard.ChoiceEventToRemoveReminder(EventID),
					parse_mode = "HTML")
					SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsDeactivate"])
					
				if somedict[EventID]["ReminderFormat"] == "OnceDay":
					Reminder = GetPropertyEvent(User, "Reminder", EventID)
					Time = GetPropertyEvent(User, "Time", EventID)
					days = FormatDays(int(Reminder), Settings["language"])
					if Reminder == "0": text = f"{number_event}) " + _("<b>$Name</b>\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ $Time –¥–µ–Ω—å –≤ –¥–µ–Ω—å!").replace("$Name", Name).replace("$Time", Time)
					else: text = f"{number_event}) " + _("<b>$Name</b>\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ $Time –∑–∞ $Reminder $days!").replace("$Name", Name).replace("$Time", Time).replace("$Reminder", Reminder).replace("$days", days)
					DeleteMessageNotification = Bot.send_message(
						Call.message.chat.id,
						text = text,
						reply_markup = inline_keyboard.ChoiceEventToRemoveReminder(EventID),
						parse_mode = "HTML")
					SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsDeactivate"])
				number_event += 1 
				sleep(0.1)			
	else:
		DeleteMessageNotification = Bot.send_message(
				Call.message.chat.id, 
				_("–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ!"),
				reply_markup = inline_keyboard.AddNewEvent()
				)
		SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsDeactivate"])
	
	DeleteMessageNotification = Bot.send_message(
		Call.message.chat.id,
		_("<b>–î–ª—è –≤—ã—Ö–æ–¥–∞</b> –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ \"–ù–∞–∑–∞–¥\":"),
		reply_markup = inline_keyboard.SteakActions(name_button = _("üîô –ù–∞–∑–∞–¥"), delete = "MessageNotificationsDeactivate"),
		parse_mode = "HTML"
		)
	
	SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsDeactivate"])

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("remove_reminder"))
def InlineButtonRemoveReminder(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	
	EventID = Call.data.split("_")[-1]
	Data = {"Reminder": None, "ReminderFormat": "WithoutReminders", "Time": None}
	SetPropertyEvent(User, Data, EventID)

	Bot.delete_message(Call.message.chat.id, Call.message.id)

	Delete = 0

	for EventID in User.get_property("events"):
		if User.get_property("events")[EventID]["ReminderFormat"] != "WithoutReminders": 
			Delete += 1

	if Delete == 0:
		DeleteMessageID(User, Call, telemaster, "MessageNotificationsDeactivate")

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Change_reminder"))
def ProcessChange_reminders(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	CountRemained = 0
	somedict: dict = User.get_property("events").copy()

	if User.get_property("events"):
		for EventID in somedict.keys():
			if somedict[EventID]["Format"] == "Remained":
				CountRemained += 1 
		if CountRemained >= 1:
			DeleteMessageNotification = Bot.send_message(
				Call.message.chat.id, 
				_("–í–ê–®–ò –°–û–ë–´–¢–ò–Ø:"))
			SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
			
			number_event = 1
			for EventID in somedict.keys():
				Name = GetPropertyEvent(User, "Name", EventID)
				
				if somedict[EventID]["ReminderFormat"] == "EveryDay":
					DeleteMessageNotification = Bot.send_message(
					Call.message.chat.id,
					f"{number_event}) " + _("<b>%s</b>\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!") % Name,
					reply_markup = inline_keyboard.ChoiceEventToChangeReminder(EventID),
					parse_mode = "HTML")
					SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
	
				if somedict[EventID]["ReminderFormat"] == "OnceDay":

					Reminder = GetPropertyEvent(User, "Reminder", EventID)
					Time = GetPropertyEvent(User, "Time", EventID)
					days = FormatDays(int(Reminder), Settings["language"])
					if Reminder == "0": text = f"{number_event}) " + _("<b>$Name</b>\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ $Time –¥–µ–Ω—å –≤ –¥–µ–Ω—å!").replace("$Name", Name).replace("$Time", Time)
					else: text = f"{number_event}) " +  _("<b>$Name</b>\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ $Time –∑–∞ $Reminder $days!").replace("$Name", Name).replace("$Time", Time).replace("$Reminder", Reminder).replace("$days", days)
					DeleteMessageNotification = Bot.send_message(
						Call.message.chat.id,
						text = text,
						reply_markup = inline_keyboard.ChoiceEventToChangeReminder(EventID),
						parse_mode = "HTML")
					SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
	
				if somedict[EventID]["ReminderFormat"] == "WithoutReminders" and somedict[EventID]["Format"] == "Remained":
					DeleteMessageNotification = Bot.send_message(
						Call.message.chat.id,
						f"{number_event}) " + _("<b>%s</b>\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ!") % (Name),
						reply_markup = inline_keyboard.ChoiceEventToChangeReminder(EventID),
						parse_mode = "HTML")
					SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
				number_event += 1 		
				sleep(0.1)
		else:
			DeleteMessageNotification = Bot.send_message(
					Call.message.chat.id, 
					text = _("–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ!"),
					reply_markup = inline_keyboard.AddNewEvent()
					)
			SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
		
	else:
		DeleteMessageNotification = Bot.send_message(
					Call.message.chat.id, 
					text = _("–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ!"),
					reply_markup = inline_keyboard.AddNewEvent()
					)
		SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
		

	DeleteMessageNotification = Bot.send_message(
		Call.message.chat.id,
		_("<b>–î–ª—è –≤—ã—Ö–æ–¥–∞</b> –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ \"–ù–∞–∑–∞–¥\":"),
		reply_markup = inline_keyboard.SteakActions(name_button = _("üîô –ù–∞–∑–∞–¥"), delete = "MessageNotificationsChange"),
		parse_mode = "HTML"
		)
	SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
		
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("choice_event"))
def InlineButtonChoiceEventToAddReminder(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	EventID = Call.data.split("_")[-1]
	User.set_property("EventID", EventID)
	Name = GetPropertyEvent(User, "Name", EventID)
	DeleteMessageNotification = Bot.send_message(
		Call.message.chat.id,
		_("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è <b>%s</b>:") % Name,
		reply_markup = inline_keyboard.ChoiceFormatReminderChange(),
		parse_mode = "HTML"
	)
	SaveMessageID(User, DeleteMessageNotification.id, ["Leavechangenotifications", "MessageNotificationsChange"])
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("settings_for"))
def InlineButtonSettingsforReminder(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	DeleteMessageNotification = Bot.send_message(
		Call.message.chat.id,
		_("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"),
		reply_markup = inline_keyboard.ChoiceFormatReminderNew()
		)
	SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
	Bot.answer_callback_query(Call.id)
	
@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("every_day_reminder"))
def ProcessEveryDayReminders(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	subtype = Call.data.split("_")[-1]
	User.set_temp_property("ReminderFormat", "EveryDay")
	EventID = User.get_property("EventID")

	if isEventExist(User, EventID): Name = GetPropertyEvent(User, "Name", EventID)
	else: Name = User.get_property("Name")

	if subtype == "start": 
		User.set_property("Oncereminders_button", subtype)
		remains = Calculator(User.get_property("Date"))
		if remains < 0: 
			DeleteMessageNotification = Bot.send_message(
				Call.message.chat.id,
				text = _("–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—Å—á—ë—Ç–∞ –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å?"),
				reply_markup = inline_keyboard.ChoiceFormat()
			)
			SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
		elif remains == 0: 
			DeleteMessageNotification = Bot.send_message(
				chat_id = Call.message.chat.id,
				text = _("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ $Name —Å–µ–≥–æ–¥–Ω—è!!! üòä".replace("$Name", Name)),
				reply_markup = inline_keyboard.SettingsNotifications(EventID, Send = "SendMessagewithEmoji"),
				parse_mode = "HTML"
			)
			SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
			Data = GetDataEvent(User)
			SetDataEvent(User, Data, EventID)

		else:
			days = FormatDays(remains, Settings["language"])
			DeleteMessageNotification = Bot.send_message(
				chat_id = Call.message.chat.id,
				text = _("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–î–æ —Å–æ–±—ã—Ç–∏—è <b>$Name</b> –æ—Å—Ç–∞–ª–æ—Å—å $remains $days!\n\n–ë—É–¥–µ–º –∂–¥–∞—Ç—å –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å <u>–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏!</u> üõé").replace("$Name", Name).replace("$remains", str(remains)).replace("$days", days),
				reply_markup = inline_keyboard.SettingsNotifications(EventID, Send = "SendMessagewithEmoji"),
				parse_mode = "HTML"
			)
			SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
			Data = GetDataEvent(User)
			SetDataEvent(User, Data, EventID)

	if subtype == "change":
		Name = GetPropertyEvent(User, "Name", EventID)
		DeleteMessageNotification = Bot.send_message(
			Call.message.chat.id,
			_("–í—ã —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è <b>$Name</b>?").replace("$Name", Name),
			parse_mode = "HTML",
			reply_markup = inline_keyboard.Confirmation("EveryNotifications", subtype)
			)
		SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("once_reminder"))
def ProcessOnceDayReminders(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	subtype = Call.data.split("_")[-1]
	EventID = User.get_property("EventID")

	if isEventExist(User, EventID) and GetPropertyEvent(User, "Format", EventID) == "Passed":
		DeleteMessageNotification = SendChangeFormat(Bot, Call, inline_keyboard)
		return

	DeleteMessageNotification = Bot.send_message(
			Call.message.chat.id,
			_("–í –¥–µ–Ω—å —Å–æ–±—ã—Ç–∏—è –º—ã –≤–∞–º –ø—Ä–∏—à–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! üõé \n\n–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ?\n\n<i>–ü—Ä–∏–º–µ—Ä: 18:30</i>"),
			reply_markup = inline_keyboard.ChoiceAnotherDay(),
			parse_mode = "HTML"
			)
	User.set_expected_type("time")
	User.set_property("Oncereminders_button", subtype)
	SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("without_reminders"))
def ProcessWithoutReminders(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	subtype = Call.data.split("_")[-1]
	EventID = User.get_property("EventID")
	Name = GetPropertyEvent(User, "Name", EventID)
	if subtype == "change": text = _("–•–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è <b>$Name</b>?¬†").replace("$Name", Name)
	else: text = _("–•–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è <b>$Name</b>?").replace("$Name", Name)
	DeleteMessageNotification = Bot.send_message(
		Call.message.chat.id,
		text,
		reply_markup = inline_keyboard.Confirmation("WithoutNotifications", subtype),
		parse_mode = "HTML"
		)
	SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Confirmation"))
def ProcessConfirmation(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	notification_type = Call.data.split("_")[1]
	subtype = Call.data.split("_")[2]
	EventID = User.get_property("EventID")
	Name = GetPropertyEvent(User, "Name", EventID)

	if notification_type == "WithoutNotifications":
		if subtype == "change": button = inline_keyboard.SteakActions(name_button = _("–°–ø–∞—Å–∏–±–æ!"), delete = "MessageNotificationsChange", update = "AllReminders")
		else: button = inline_keyboard.SteakActions(name_button = _("–°–ø–∞—Å–∏–±–æ!"), delete = "MessageNotificationsChange", update = "WithoutReminders")

		Data = {"ReminderFormat": "WithoutReminders", "Reminder": None, "Time": None}
		DeleteMessageNotification = Bot.send_message(
			Call.message.chat.id,
			_("–î–ª—è —Å–æ–±—ã—Ç–∏—è <b>%s</b> –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã! üîï\n\n–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –î–µ–Ω—å –≤ –¥–µ–Ω—å –º—ã –≤–∞—Å –≤—Å–µ —Ä–∞–≤–Ω–æ –æ –Ω—ë–º —É–≤–µ–¥–æ–º–∏–º!") % Name,
			reply_markup = button,
			parse_mode = "HTML"
		)
		SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])

	if notification_type == "EveryNotifications":
		Data = {"ReminderFormat": "EveryDay", "Reminder": None, "Time": None}
		DeleteMessageNotification = Bot.send_message(
		Call.message.chat.id,
			_("–î–ª—è —Å–æ–±—ã—Ç–∏—è <b>%s</b> –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!") % Name,
			reply_markup = inline_keyboard.SteakActions(name_button = _("–°–ø–∞—Å–∏–±–æ!"), delete = "MessageNotificationsChange", update = "AllReminders"),
			parse_mode = "HTML"
		)
		SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])
		
	SetPropertyEvent(User, Data, EventID)
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Change_name"))
def ProcessChangeName(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	User.set_property("emoji", True)
	WaitingName = Bot.send_message(
		Call.message.chat.id,
		_("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –Ω–æ–≤–æ–µ –∏–º—è!"),
		reply_markup = inline_keyboard.SteakActions(name_button =_("–°–ø–∞—Å–∏–±–æ, –µ—â—ë –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª)"), delete = "WaitingName")
		)
	User.set_expected_type("call")
	SaveMessageID(User, WaitingName.id, ["WaitingName", "Changename"])

	Bot.answer_callback_query(Call.id)
	
@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Steak"))
def ProcessSteakActions(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	User.set_expected_type(None)
	Delete = Call.data.split("_")[1]
	Update = Call.data.split("_")[2]
	Send = Call.data.split("_")[3]
	if not Send:
		Bot.delete_message(Call.message.chat.id, Call.message.id)
	if Delete: 
		DeleteMessageID(User, Call, telemaster, Delete)
	if Update:
		EventID = User.get_property("EventID")
		Name = GetPropertyEvent(User, "Name", EventID)
		if Update == "WithoutReminders": 
			remains = Calculator(GetPropertyEvent(User, "Date", EventID))
			if remains < 0: 
				skinwalker = str(Skinwalker(GetPropertyEvent(User, "Date", EventID)))
				remains = str(Calculator(skinwalker))
				
			days = FormatDays(remains, language = "ru")
			DeleteMessageNotification = Bot.send_message(
				chat_id = Call.message.chat.id,
				text = _("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–î–æ —Å–æ–±—ã—Ç–∏—è <b>$Name</b> –æ—Å—Ç–∞–ª–æ—Å—å $remains $days!\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–º –ø—Ä–∏–¥–µ—Ç —Ç–æ–ª—å–∫–æ <u>–¥–µ–Ω—å –≤ –¥–µ–Ω—å</u>! üõé").replace("$Name", Name).replace("$remains", remains).replace("$days", days),
				reply_markup = inline_keyboard.SettingsNotifications(EventID),
				parse_mode = "HTML"
			)
			SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])

		if Update == "OnceDay": 
			Reminder = GetPropertyEvent(User, "Reminder", EventID)
			Time = GetPropertyEvent(User, "Time", EventID)
			days = FormatDays(Time, language = "ru")

			if Reminder == "0": text = "–ò—Ç–∞–∫, –ø–æ–¥—ã—Ç–æ–∂–∏–º!\n\n–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ: <b>$Name</b>\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω—ë–º –ø—Ä–∏–¥—ë—Ç <b>–≤ $Time –¥–µ–Ω—å –≤ –¥–µ–Ω—å!</b> üõé".replace("$Name", Name).replace("$Time", Time)
			else: text = "–ò—Ç–∞–∫, –ø–æ–¥—ã—Ç–æ–∂–∏–º!\n\n–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ: <b>$Name</b>\n\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω—ë–º –ø—Ä–∏–¥—ë—Ç <b>–≤ 18:30 –∑–∞ $Reminder $days</b>! üõé".replace("$Name", Name).replace("$Time", Time).replace("$Reminder", Reminder).replace("$days", days)
			DeleteMessageNotification = Bot.send_message(

				chat_id = Call.message.chat.id,
				text = text,
				reply_markup = inline_keyboard.SettingsNotifications(EventID),
				parse_mode = "HTML"
			)
			SaveMessageID(User, DeleteMessageNotification.id, ["MessageNotificationsChange"])

		if Update == "AllReminders":
			ProcessChange_reminders(Call)
	if Send: SendMessagewithEmoji(Bot, Call, inline_keyboard)
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Emoji"))
def ProcessWithEmoji(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)	
	Reaction = Call.data.split("_")[1]
	Type = Call.data.split("_")[2]
	if Reaction == "ü§ó":
		PutReaction(Bot, Call, Reaction)
		DeleteMessageID(User, Call, telemaster, "Changename")
	
	if Reaction == "‚ù§Ô∏è" and User.has_property("Oncereminders_button") and User.get_property("Oncereminders_button") != "change": PutReaction(Bot, Call, Reaction)
	if Type == "events": DeleteMessageID(User, Call, Bot, "MessagesMyEvents")

			
	Bot.answer_callback_query(Call.id)

@Bot.message_handler(content_types = ["audio", "document", "video"])
def File(Message: types.Message):
	User = Manager.auth(Message.from_user)
	AdminPanel.procedures.files(Bot, User, Message)

AdminPanel.decorators.photo(Bot, Manager)

Bot.infinity_polling()