#==========================================================================================#
# >>>>> –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ë–ò–ë–õ–ò–û–¢–ï–ö –ò –ú–û–î–£–õ–ï–ô <<<<< #
#==========================================================================================#

from Source.Functions import Calculator, CheckValidDate, GetFreeID, Skinwalker, FormatDays, _
from Source.InlineKeyboards import InlineKeyboards
from Source.ReplyKeyboard import ReplyKeyboard
from Source.Thread import Reminder
from Source.AdminPanel import Panel

from dublib.Methods.JSON import ReadJSON
from dublib.Methods.System import CheckPythonMinimalVersion, Clear
from dublib.Methods.Filesystem import MakeRootDirectories
from dublib.TelebotUtils.Cache import TeleCache
from dublib.TelebotUtils import UsersManager
from dublib.Polyglot import Markdown

from telebot import types
from time import sleep
from apscheduler.schedulers.background import BackgroundScheduler
import telebot
import logging

#==========================================================================================#
# >>>>> –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï <<<<< #
#==========================================================================================#

logging.basicConfig(level=logging.INFO, encoding="utf-8", filename="LOGING.log", filemode="w",
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S')

#==========================================================================================#
# >>>>> –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò <<<<< #
#==========================================================================================#

CheckPythonMinimalVersion(3, 10)
MakeRootDirectories(["Data/Users"])
Clear()

#==========================================================================================#
# >>>>> –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê <<<<< #
#==========================================================================================#

Settings = ReadJSON("Settings.json")
Bot = telebot.TeleBot(Settings["token"])

#==========================================================================================#
# >>>>> –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–ö–¢–û–í –ö–õ–ê–°–°–û–í <<<<< #
#==========================================================================================#

Manager = UsersManager("Data/Users")
InlineKeyboardsBox = InlineKeyboards()
ReplyKeyboardBox = ReplyKeyboard()
scheduler = BackgroundScheduler()
reminder = Reminder(Bot, Manager, Settings["language"])
AdminPanel = Panel()

#==========================================================================================#
# >>>>> –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–ô –í APSHEDULER <<<<< #
#==========================================================================================#

scheduler.add_job(reminder.StartRemindering, 'cron', hour = Settings["start_remindering"].split(":")[0], minute = Settings["start_remindering"].split(":")[1])
scheduler.add_job(reminder.ContinueRemindering, 'cron', hour = Settings["continue_remindering"].split(":")[0], minute = Settings["continue_remindering"].split(":")[1])
scheduler.start()

#==========================================================================================#
# >>>>> –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –í –ö–≠–® <<<<< #
#==========================================================================================#

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞.
Cacher = TeleCache()
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.
Cacher.set_options(Settings["token"], Settings["chat_id"])

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
try:
	File = Cacher.get_cached_file(Settings["share_image_path"], type = types.InputMediaPhoto)
	# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
	FileID = Cacher[Settings["share_image_path"]]
except Exception:
	pass

#==========================================================================================#
# >>>>> –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–ò–†–û–í–ê–ù–ò–Ø <<<<< #
#==========================================================================================#

AdminPanel.decorators.commands(Bot, Manager, Settings["password"])

@Bot.message_handler(commands=["start"])
def ProcessCommandStart(Message: types.Message):
	User = Manager.auth(Message.from_user)
	User.set_expected_type(None)
	try:
		File = Cacher.get_cached_file(Settings["start_jpg"], type = types.InputMediaPhoto)
		# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
		StartID = Cacher[Settings["start_jpg"]]
	except Exception:
		pass

	User.set_property("events", {}, False)
	try:
		Bot.send_photo(
			Message.chat.id, 
			photo = StartID,
			caption = _("üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\\!* üéâ\n\n–Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ —É–∑–Ω–∞–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –Ω–∏—Ö –æ—Å—Ç–∞–ª–æ—Å—å\\."),
			parse_mode= "MarkdownV2"
		)
	except: 
		Bot.send_message(
			Message.chat.id, 
			text = _("üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\\!* üéâ\n\n–Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏ —É–∑–Ω–∞–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –Ω–∏—Ö –æ—Å—Ç–∞–ª–æ—Å—å\\."),
			parse_mode= "MarkdownV2"
		)
		
	User.set_temp_property("emoji", False)

	try:
		call = User.get_property("call")
		Bot.send_message(
			Message.chat.id, 
			call + _(", –º—ã —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞! ü§ó"),
			reply_markup= ReplyKeyboardBox.AddMenu(User)
			)
		
	except KeyError:
		Bot.send_message(
			Message.chat.id, 
			_("–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è! ü§ó")
			)
		User.set_expected_type("call")
	
AdminPanel.decorators.reply_keyboards(Bot, Manager)

@Bot.message_handler(content_types = ["text"], regexp = _("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
def ProcessTextReminders(Message: types.Message):
	User = Manager.auth(Message.from_user)
	Bot.send_message(
		Message.chat.id, 
		_("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"), reply_markup = InlineKeyboardsBox.SettingsMenu(User))
		
@Bot.message_handler(content_types = ["text"], regexp = _("‚ûï –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"))
def ProcessTextNewEvent(Message: types.Message):
	User = Manager.auth(Message.from_user)

	Bot.send_message(
		Message.chat.id, 
		_("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ç–∞–∫ –∂–¥—ë—Ç–µ\\! üòâ \n\n"),
			parse_mode = "MarkdownV2"
		)
	User.set_expected_type("name")

@Bot.message_handler(content_types = ["text"], regexp = _("üóì –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è"))
def ProcessTextMyEvents(Message: types.Message):
	User = Manager.auth(Message.from_user)
	DeleteMessages = list()

	if not User.get_property("events"):
		Bot.send_message(
			Message.chat.id, 
			_("–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è üôÑ\n–ù—É–∂–Ω–æ —ç—Ç–æ –¥–µ–ª–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å\\!\\)"),
			parse_mode = "MarkdownV2", 
			reply_markup= InlineKeyboardsBox.AddNewEvent()
			)

	else:
		call = Markdown(str(User.get_property("call"))).escaped_text
		Events = User.get_property("events").copy()
		DeleteMessage = Bot.send_message(
					Message.chat.id,
					_("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, %s\\!") % call, 
					parse_mode = "MarkdownV2")
		
		DeleteMessages.append(DeleteMessage.id)
		
		for EventID in Events.keys():
			remains = Calculator(User.get_property("events")[EventID]["Date"])
			name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text
			days = FormatDays(remains, Settings["language"])

			if remains == 0:
				Bot.send_message(
					Message.chat.id,
					_("–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *%s* —Å–µ–≥–æ–¥–Ω—è\\.") % name,
					parse_mode = "MarkdownV2",
					reply_markup = InlineKeyboardsBox.RemoveEvent(EventID))

			elif remains > 0:
				remains = Markdown(str(remains)).escaped_text
				Bot.send_message(
					Message.chat.id,
					_("*%s* –Ω–∞—Å—Ç—É–ø–∏—Ç —á–µ—Ä–µ–∑ %s %s\\!") % (name, remains, days),
					parse_mode = "MarkdownV2",
					reply_markup = InlineKeyboardsBox.RemoveEvent(EventID))
				
			else:
				if "Format" in Events[EventID]:
					if Events[EventID]["Format"] == "Passed":
						remains = Markdown(str(abs(remains))).escaped_text
						Bot.send_message(
							Message.chat.id,
							_("–°–æ–±—ã—Ç–∏–µ *%s* –±—ã–ª–æ %s %s –Ω–∞–∑–∞–¥\\!") % (name, remains, days),
							parse_mode = "MarkdownV2",
							reply_markup = InlineKeyboardsBox.RemoveEvent(EventID))

					if Events[EventID]["Format"] == "Remained":
						newdate = Skinwalker(User.get_property("events")[EventID]["Date"])
						remainsnew = Calculator(newdate)
						days = FormatDays(remainsnew, Settings["language"])
						if remainsnew == 0:
							Bot.send_message(
								Message.chat.id,
								_("–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *%s* —Å–µ–≥–æ–¥–Ω—è\\.") % name,
								parse_mode = "MarkdownV2",
								reply_markup = InlineKeyboardsBox.RemoveEvent(EventID))
							
						else:
							remainsnew = Markdown(str(remainsnew)).escaped_text
							Bot.send_message(
								Message.chat.id, 
								_("*%s* –Ω–∞—Å—Ç—É–ø–∏—Ç —á–µ—Ä–µ–∑ %s %s\\!") % (name, remainsnew, days),
								parse_mode = "MarkdownV2",
								reply_markup = InlineKeyboardsBox.RemoveEvent(EventID))
							
				else:
					remains = Markdown(str(abs(remains))).escaped_text
					Bot.send_message(
						Message.chat.id, 
						_("–°–æ–±—ã—Ç–∏–µ *%s* –±—ã–ª–æ %s %s –Ω–∞–∑–∞–¥\\!") % (name, remains, days),
						parse_mode = "MarkdownV2",
						reply_markup = InlineKeyboardsBox.RemoveEvent(EventID))
					
			sleep(0.1)
		DeleteMessage = Bot.send_message(
						Message.chat.id,
						_("–•–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –¥–Ω—è\\!\\)"),
						parse_mode = "MarkdownV2"
						)
		
		DeleteMessages.append(DeleteMessage.id)
		User.set_temp_property("ID_DelMessage", DeleteMessages)
	
@Bot.message_handler(content_types = ["text"], regexp = _("üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"))
def ProcessShareWithFriends(Message: types.Message):
	User = Manager.auth(Message.from_user)
	try:
		Bot.send_photo(
			Message.chat.id, 
			photo = FileID,
			caption = _("@Dnido_bot\n@Dnido_bot\n@Dnido_bot\n\n–ü—Ä–æ—Å—Ç–æ <b>–¢-—Ç-—Ç–æ–ø–æ–≤—ã–π</b> –±–æ—Ç –¥–ª—è –æ—Ç—Å—á—ë—Ç–∞ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏–π ü•≥\n\n<b><i>–ü–æ–ª—å–∑—É–π—Å—è –∏ –¥–µ–ª–∏—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!</i></b>"), 
			reply_markup = InlineKeyboardsBox.AddShare(),
			parse_mode = "HTML" 
			)
	except: 
		Bot.send_message(
			Message.chat.id,
			_("@namebot"),
			reply_markup = InlineKeyboardsBox.AddShare()
			
			)

@Bot.message_handler(content_types=["text"])
def ProcessText(Message: types.Message):
	User = Manager.auth(Message.from_user)

	if AdminPanel.procedures.text(Bot, User, Message): return

	if User.expected_type == "call":
		User.set_property("call", Message.text)
		User.set_expected_type(None)

		call = User.get_property("call")
		if User.get_property("emoji"):
			Bot.send_message(
				Message.chat.id,
				_("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, %s! üòé") % call,
			reply_markup = ReplyKeyboardBox.AddMenu(User), 
			
			)
		else: 
			Bot.send_message(
				Message.chat.id,
				_("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, %s!") % call,
			reply_markup = ReplyKeyboardBox.AddMenu(User)
			)
			User.clear_temp_properties()
			sleep(0.1)

		if not User.get_property("events"):
			Bot.send_message(
			Message.chat.id, 
			text = _("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ! üôå"),
			reply_markup = InlineKeyboardsBox.AddNewEvent()
			)
		
		return
	
	if User.expected_type == "date":
		name = Markdown(User.get_property("date")).escaped_text
		if CheckValidDate(Message.text) == True:
			Events = User.get_property("events")
			FreeID = str(GetFreeID(Events))
			Events[FreeID] = {"Name": User.get_property("date"), "Date": Message.text, "ReminderFormat": "EveryDay"}
			User.set_expected_type(None)
			User.set_property("events", Events)

			remains = Calculator(User.get_property("events")[FreeID]["Date"])
			name = Markdown(User.get_property("events")[FreeID]["Name"]).escaped_text
			days = FormatDays(remains, Settings["language"])
			
			if remains > 0:
				Bot.send_message(
					Message.chat.id,
					text = _("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\!\n\n–î–æ —Å–æ–±—ã—Ç–∏—è *%s* –æ—Å—Ç–∞–ª–æ—Å—å %s %s\\!\n\n–ë—É–¥–µ–º –∂–¥–∞—Ç—å –µ–≥–æ –≤–º–µ—Å—Ç–µ\\! üí™") % (name, remains, days), 
					parse_mode = "MarkdownV2",
					reply_markup= InlineKeyboardsBox.ChoiceReminderForNewEvent(FreeID)
					)
				
			elif remains == 0:
				Bot.send_message(
					Message.chat.id,
					text = _("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\!\n\n–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *%s* —Å–µ–≥–æ–¥–Ω—è\\!\\!\\! üòä") % name, 
					parse_mode = "MarkdownV2",
					reply_markup= InlineKeyboardsBox.ChoiceReminderForNewEvent(FreeID)
					)
			else: 
				Bot.send_message(
					Message.chat.id,
					text = _("–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—Å—á—ë—Ç–∞ –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å?"),
					reply_markup= InlineKeyboardsBox.ChoiceFormat(User, FreeID)
				)

			User.clear_temp_properties()
			User.set_temp_property("EventsID", FreeID)

		else:
			Bot.send_message(
				Message.chat.id, 
				_("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
				)

		return

	if User.expected_type == "name":
		User.set_temp_property("date", Message.text)
		Bot.send_message(
			Message.chat.id,
			_("–ê —Ç–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–∞—Ç–∞ –≤–∞—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è ü§î \n\n_–ü—Ä–∏–º–µ—Ä_\\: 01\\.01\\.2000"), 
			parse_mode = "MarkdownV2")

		User.set_expected_type("date")

		return
	
	if User.expected_type == "reminder":
		
		if Message.text.isdigit() and int(Message.text) >= 1 and int(Message.text) <= 366:
			Events: dict = User.get_property("events")
			ReminderDict: dict = {"Reminder": Message.text}
			Events[User.get_property("EventsID")].update(ReminderDict)
			User.set_property("events", Events)
			User.set_expected_type(None)

			Name = User.get_property("events")[User.get_property("EventsID")]["Name"]
			Reminder = User.get_property("events")[User.get_property("EventsID")]["Reminder"]
			days = FormatDays(Reminder, Settings["language"])
			Bot.send_message(
				Message.chat.id,
				_("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞!\n\n–ó–∞ <b>$reminder $days</b> –º—ã –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏–º –æ —Å–æ–±—ã—Ç–∏–∏ <b>$name</b>!").replace("$reminder", str(Reminder)).replace("$name", Name).replace("$days", days),
				parse_mode = "HTML"
			)
			
		else:
			Bot.send_message(
				Message.chat.id,
				_("–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –æ—Ç –º–µ–Ω—è —Ö–æ—Ç–∏—Ç–µ."))
		return

AdminPanel.decorators.inline_keyboards(Bot, Manager)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("remove_event"))
def InlineButtonRemoveEvent(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	EventID = Call.data.split("_")[-1]
	Events: dict = User.get_property("events")
	del Events[EventID]
	User.set_property("events", Events)
	Bot.delete_message(Call.message.chat.id, Call.message.id)
	if not User.get_property("events"):
		for ID in User.get_property("ID_DelMessage"):
			Bot.delete_message(Call.message.chat.id, ID)
		User.clear_temp_properties()
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("remove_reminder"))
def InlineButtonRemoveReminder(Call: types.CallbackQuery):
	Delete = 0 
	User = Manager.auth(Call.from_user)
	
	EventID = Call.data.split("_")[-1]
	Events: dict = User.get_property("events")
	try:
		del Events[EventID]["Reminder"]
		del Events[EventID]["ReminderFormat"]
	except:
		del Events[EventID]["ReminderFormat"]
	
	User.set_property("events", Events)
	Bot.delete_message(Call.message.chat.id, Call.message.id)
	for EventID in User.get_property("events"):
		if "ReminderFormat" in User.get_property("events")[EventID].keys() and User.get_property("events")[EventID]["ReminderFormat"] != "WithoutReminders": 
			Delete += 1

	if Delete == 0:
		Bot.delete_message(Call.message.chat.id, User.get_property("ID_DelMessage"))
		User.clear_temp_properties()

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("create_event"))
def InlineButtonCreateEvent(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	Bot.send_message(
		Call.message.chat.id, 
		_("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ç–∞–∫ –∂–¥—ë—Ç–µ\\! üòâ \n\n_–ù–∞–ø—Ä–∏–º–µ—Ä_\\: –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"),
		parse_mode = "MarkdownV2"
	)
	User.set_expected_type("name")

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("choice_event"))
def InlineButtonChoiceEventToAddReminder(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	if Call.data.count("_") == 2:
		EventsID = Call.data.split("_")[-1]
		Bot.send_message(
			Call.message.chat.id,
			_("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"),
			reply_markup = InlineKeyboardsBox.ChoiceFormatReminderChange(User)
		)
	else: 
		EventsID = Call.data.split("_")[-2]
		Bot.send_message(
			Call.message.chat.id,
			_("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"),
			reply_markup = InlineKeyboardsBox.ChoiceFormatReminderNew(User)
		)
	
	User.set_temp_property("EventsID", EventsID)
	User.set_expected_type("reminder")

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("passed_days"))
def InlineButtonPassedDays(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	FreeID = Call.data.split("_")[-1]
	name = Markdown(User.get_property("events")[FreeID]["Name"]).escaped_text
	remains = Calculator(User.get_property("events")[FreeID]["Date"])

	Event: dict = User.get_property("events")
	Format: dict = {"Format": "Passed"}
	ReminderFormat: dict = {"ReminderFormat": "WithoutReminders"}
	Event[FreeID].update(Format)
	Event[FreeID].update(ReminderFormat)
	User.set_property("events", Event)

	days = FormatDays(remains, Settings["language"])

	Bot.send_message(
		Call.message.chat.id,
		text = _("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\!\n\n–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *%s* –ø—Ä–æ–∏–∑–æ—à–ª–æ %s %s –Ω–∞–∑–∞–¥\\!") % (name, abs(remains), days), 
		parse_mode = "MarkdownV2"
		)
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("remained_days"))
def InlineButtonRemainedDays(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	FreeID = Call.data.split("_")[-1]
	name = Markdown(User.get_property("events")[FreeID]["Name"]).escaped_text
	newevent = Skinwalker(User.get_property("events")[FreeID]["Date"])
	remains = Calculator(newevent)

	Event: dict = User.get_property("events")
	Format: dict = {"Format": "Remained"}
	Event[FreeID].update(Format)
	User.set_property("events", Event)

	days = FormatDays(remains, Settings["language"])
	if remains == 365:
		Bot.send_message(
				Call.message.chat.id,
				text = _("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\!\n\n–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ *%s* —Å–µ–≥–æ–¥–Ω—è\\!\\!\\! üòä") % name, 
				parse_mode = "MarkdownV2",
				reply_markup= InlineKeyboardsBox.ChoiceReminderForNewEvent(FreeID)
				)
	else:
		Bot.send_message(
			Call.message.chat.id,
			_("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\\!\n\n–î–æ —Å–æ–±—ã—Ç–∏—è *%s* –æ—Å—Ç–∞–ª–æ—Å—å %s %s\\!\n\n–ë—É–¥–µ–º –∂–¥–∞—Ç—å –µ–≥–æ –≤–º–µ—Å—Ç–µ\\! üí™")  % (name, remains, days), 
			parse_mode = "MarkdownV2", 
			reply_markup= InlineKeyboardsBox.ChoiceReminderForNewEvent(FreeID)
			)

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Change_reminder"))
def ProcessTextNewReminder(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	somedict = User.get_property("events").copy()
			
	if User.get_property("events"):

		Bot.send_message(
			Call.message.chat.id, 
			_("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:"))
		
		for EventID in somedict.keys():
			Name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text
			if "ReminderFormat" in somedict[EventID].keys():
				
				if somedict[EventID]["ReminderFormat"] == "EveryDay":
					if "Format" not in somedict[EventID].keys() or "Format" in somedict[EventID].keys() and somedict[EventID]["Format"] == "Remained":
						Bot.send_message(
						Call.message.chat.id,
						_("*%s*\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\\!") % Name,
						reply_markup = InlineKeyboardsBox.ChoiceEventToChangeReminder(EventID),
						parse_mode = "MarkdownV2")
					
				if somedict[EventID]["ReminderFormat"] == "OnceDay":
					if "Reminder" in somedict[EventID].keys():

						Reminder = Markdown(User.get_property("events")[EventID]["Reminder"]).escaped_text
						days = FormatDays(Reminder, Settings["language"])
						Bot.send_message(
							Call.message.chat.id,
							_("*%s*\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ %s %s\\!") % (Name, Reminder, days),
							reply_markup = InlineKeyboardsBox.ChoiceEventToChangeReminder(EventID),
							parse_mode = "MarkdownV2")
			
			sleep(0.1)

	elif not User.get_property("events"):
		Bot.send_message(
			Call.message.chat.id, 
			text = _("–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ!"),
			reply_markup = InlineKeyboardsBox.AddNewEvent()
			)
		
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Delete_reminder"))
def ProcessDeleteReminder(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	CountReminder = 0
	somedict = User.get_property("events").copy()

	for EventID in somedict.keys():
		if "ReminderFormat" in User.get_property("events")[EventID].keys() and User.get_property("events")[EventID]["ReminderFormat"] != "WithoutReminders":
			CountReminder += 1
	
	if CountReminder < 1:
		Bot.send_message(
			Call.message.chat.id, 
			_("–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ!"),
			reply_markup = InlineKeyboardsBox.AddNewEvent()
			)
	else:
		DeleteMessage = Bot.send_message(
					Call.message.chat.id,
					_("–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"))
		User.set_temp_property("ID_DelMessage", DeleteMessage.id)

		for EventID in somedict.keys():
			Name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text
		
			if "ReminderFormat" in somedict[EventID].keys():
				
				if somedict[EventID]["ReminderFormat"] == "EveryDay":
					if "Format" not in somedict[EventID].keys() or "Format" in somedict[EventID].keys() and somedict[EventID]["Format"] == "Remained":
						Bot.send_message(
						Call.message.chat.id,
						_("*%s*\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\\!") % Name,
						reply_markup = InlineKeyboardsBox.RemoveReminder(EventID),
						parse_mode = "MarkdownV2")
					
				if somedict[EventID]["ReminderFormat"] == "OnceDay":
					if "Reminder" in somedict[EventID].keys():

						Reminder = Markdown(User.get_property("events")[EventID]["Reminder"]).escaped_text
						days = FormatDays(Reminder, Settings["language"])
						Bot.send_message(
							Call.message.chat.id,
							_("*%s*\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ %s %s\\!") % (Name, Reminder, days),
							reply_markup = InlineKeyboardsBox.RemoveReminder(EventID),
							parse_mode = "MarkdownV2")
			
			sleep(0.1)

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Change"))
def ProcessChangeName(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	User.set_temp_property("emoji", True)
	Bot.send_message(
		Call.message.chat.id,
		_("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –Ω–æ–≤–æ–µ –∏–º—è!"))
	User.set_expected_type("call")

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Info"))
def ProcessInfo(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	Bot.send_message(
		Call.message.chat.id,
		text = _("@Dnido_bot –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –Ω–∏—Ö –æ—Å—Ç–∞–ª–æ—Å—å.\n\n1) –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ —Å–æ–±—ã—Ç–∏–µ, —Ç–æ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã <b>–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> üîî. –í—ã –∏—Ö —Å–º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ \"–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –°–∞–º–æ —Å–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è.\n\n2) –î–∞–∂–µ –µ—Å–ª–∏ –≤—ã —É–±–µ—Ä–µ—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Ç–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤ –¥–µ–Ω—å —Å–æ–±—ã—Ç–∏—è –º—ã –≤–∞–º –≤—Å—ë —Ä–∞–≤–Ω–æ –æ –Ω—ë–º –Ω–∞–ø–æ–º–Ω–∏–º! –í –ø–æ–∫–æ–µ —Ç–æ—á–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∏–º! ü§ì –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å <b>—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ 10 –¥–Ω–µ–π üìÜ.\n\n<b><i>–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å, –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏!</i></b>"),
		parse_mode= "HTML",
		reply_markup= InlineKeyboardsBox.OK()
	)

	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("every_day_reminder"))
def ProcessEveryDayReminders(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	
	Events: dict = User.get_property("events")
	ReminderDict: dict = {"ReminderFormat": "EveryDay", "Format": "Remained"}

	EventID = User.get_property("EventsID")
	Events[EventID].update(ReminderDict)
	User.set_property("events", Events)

	name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text
	Bot.send_message(
		Call.message.chat.id,
		_("–î–ª—è —Å–æ–±—ã—Ç–∏—è *%s* –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã\\!") % name,
		parse_mode = "MarkdownV2"
		)
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("once_reminder"))
def ProcessOnceDayReminders(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	Events: dict = User.get_property("events")
	ReminderDict: dict = {"ReminderFormat": "OnceDay", "Format": "Remained"}

	EventID = User.get_property("EventsID")
	Events[EventID].update(ReminderDict)
	User.set_property("events", Events)

	Name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text
	Bot.send_message(
		Call.message.chat.id,
			_("–£–∫–∞–∂–∏—Ç–µ, –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–æ–±—ã—Ç–∏–∏ *%s*? üîä\n\n_–ü—Ä–∏–º–µ—Ä_\\: 10") % Name,
			parse_mode = "MarkdownV2"
		)
	User.set_expected_type("reminder")
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("without_reminders"))
def ProcessWithoutReminders(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)

	Events: dict = User.get_property("events")
	ReminderDict: dict = {"ReminderFormat": "WithoutReminders"}

	EventID = User.get_property("EventsID")
	Events[EventID].update(ReminderDict)
	User.set_property("events", Events)

	Name = Markdown(User.get_property("events")[EventID]["Name"]).escaped_text
	Bot.send_message(
		Call.message.chat.id,
			_("–î–ª—è —Å–æ–±—ã—Ç–∏—è *%s* –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã\\!\n\n–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ\\! –î–µ–Ω—å –≤ –¥–µ–Ω—å –º—ã –≤–∞—Å –≤—Å–µ —Ä–∞–≤–Ω–æ –æ –Ω—ë–º —É–≤–µ–¥–æ–º–∏–º\\! üõé") % Name,
			parse_mode = "MarkdownV2"
		)
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("Return"))
def ProcessWithoutReminders(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	Bot.delete_message(Call.message.chat.id, Call.message.id)
	
	Bot.answer_callback_query(Call.id)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("OK"))
def ProcessWithoutOK(Call: types.CallbackQuery):
	User = Manager.auth(Call.from_user)
	Bot.delete_message(Call.message.chat.id, Call.message.id)
	
	Bot.answer_callback_query(Call.id)
	
@Bot.message_handler(content_types = ["audio", "document", "video"])
def File(Message: types.Message):
	User = Manager.auth(Message.from_user)
	AdminPanel.procedures.files(Bot, User, Message)

AdminPanel.decorators.photo(Bot, Manager)

Bot.infinity_polling()
