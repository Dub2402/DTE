from dublib.TelebotUtils import UserData
from dublib.Engine.GetText import _

from telebot import types

class InlineKeyboard:

	def __init__(self):
		pass

	def SettingsMenu(self) -> types.InlineKeyboardMarkup:
		""" –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

		menu = types.InlineKeyboardMarkup()

		determinations = {
			_("üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"): "Delete_reminder",
			_("üîî –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"): "Change_reminder",
			_("üï∞ –í—Ä–µ–º—è –µ–∂–µ–¥–Ω. –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"): "time_every_reminders",
			_("ü§≠ –†–µ–∂–∏–º –±–æ—Ç–∞"): "bot_mode",
			_("üîÅ –°–º–µ–Ω–∏—Ç—å –∏–º—è –∏ –ø–æ–ª"): "Change_name",
			_("üåê –°–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"): "change_timezone",
			_("üîô –ù–∞–∑–∞–¥"): "Steak_MessageSettings__",
		}

		for string in determinations.keys(): menu.add(types.InlineKeyboardButton(string, callback_data = determinations[string]), row_width = 1)
		return menu
	
	def AddNewEvent(self) -> types.InlineKeyboardMarkup:
		"""–ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ."""

		Menu = types.InlineKeyboardMarkup()

		Create = types.InlineKeyboardButton(
			_("–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"), 
			callback_data = "create_event"
			)
		
		Menu.add(Create)

		return Menu

	def RemoveEvent(self, EventID: int) -> types.InlineKeyboardMarkup:
		"""–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è."""
		Menu = types.InlineKeyboardMarkup()

		RemoveEvent = types.InlineKeyboardButton(
			_("–£–¥–∞–ª–∏—Ç—å"), 
			callback_data = f"remove_event_{EventID}"
			)
		
		Menu.add(RemoveEvent)

		return Menu

	def AddShare(self) -> types.InlineKeyboardMarkup:
		"""–ú–µ–Ω—é –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–ª–∏ –≤—ã–π—Ç–∏ –Ω–∞–∑–∞–¥."""
		Menu = types.InlineKeyboardMarkup()

		Share = types.InlineKeyboardButton(
			_("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"), 
			switch_inline_query = "\n\n" +  _("–ü—Ä–æ—Å—Ç–æ **–¢-—Ç-—Ç–æ–ø–æ–≤—ã–π** –±–æ—Ç –¥–ª—è –æ—Ç—Å—á—ë—Ç–∞ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏–π ü•≥")
			)
		Steak = types.InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data = f"Steak___")
		
		Menu.add(Share, Steak, row_width = 1)

		return Menu

	def ChoiceGender(self):
		"""–í—ã–±–æ—Ä –ø–æ–ª–∞."""

		Menu = types.InlineKeyboardMarkup()
		
		Men = types.InlineKeyboardButton(
			_("–ú—É–∂—á–∏–Ω–∞ üë®"), 
			callback_data = "Gender_man"
			)
		Women = types.InlineKeyboardButton(
			_("–ñ–µ–Ω—â–∏–Ω–∞ üë©"), 
			callback_data = "Gender_woman"
			)
		
		Menu.add(Men, Women, row_width = 1)
		
		return Menu
	
	def ChoiceAnotherDay(self) -> types.InlineKeyboardMarkup:
		"""–í—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ –¥–Ω—è –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""

		Menu = types.InlineKeyboardMarkup()
		
		AnotherDay = types.InlineKeyboardButton(
			_("–•–æ—á—É –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å!"), 
			callback_data = "AnotherDay"
			)

		Menu.add(AnotherDay, row_width = 1)
		
		return Menu

	def ChoiceFormat(self) -> types.InlineKeyboardMarkup:
		"""–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è."""

		Menu = types.InlineKeyboardMarkup()
		
		Remained = types.InlineKeyboardButton(
			_("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å"), 
			callback_data = f"Format_Remained"
			)
		Passed = types.InlineKeyboardButton(
			_("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ"), 
			callback_data = f"Format_Passed"
			)

		Menu.add(Remained, Passed, row_width = 1)
		
		return Menu

	def Saving(self, buttons: list, text_save: str, delete: str = "", reaction: str = "") -> types.InlineKeyboardMarkup:
		"""–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:
			buttons: –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É;
			text_save: —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω;
			delete: —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å;
			reaction: –≤–∏–¥ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
		"""
		
		Menu = types.InlineKeyboardMarkup(row_width = 1)

		for button in buttons:
			if button == "notSave":
				Menu.add(
					types.InlineKeyboardButton(
					_("–ò—Å–ø—Ä–∞–≤–∏—Ç—å"), 
					callback_data = f"Save_no_{delete}"
					))
			if button == "Save":
				Menu.add(
					types.InlineKeyboardButton(
					text_save, 
					callback_data = f"Save_yes{reaction}"
					))
		
		return Menu

	def ChoiceFormatReminderStart(self) -> types.InlineKeyboardMarkup:
		"""–í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""

		Menu = types.InlineKeyboardMarkup()
		
		OnceReminder = types.InlineKeyboardButton(
			_("–†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), 
			callback_data = "once_reminder_start"
			)
		EveryReminders = types.InlineKeyboardButton(
			_("–û—Ç—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–Ω–∏"), 
			callback_data = "every_day_reminder_start"
			)

		Menu.add(OnceReminder, EveryReminders, row_width = 1)
		
		return Menu

	def SettingsNotifications(self, EventID: int, Send: str = "") -> types.InlineKeyboardMarkup:
		"""–£—Ç–æ—á–Ω—è—é—â–µ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""

		Menu = types.InlineKeyboardMarkup()

		Choice = types.InlineKeyboardButton(
			_("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), 
			callback_data = f"settings_for_{EventID}"
			)
		Steak = types.InlineKeyboardButton(
			_("–°–ø–∞—Å–∏–±–æ, –≤—Å–µ —Å—É–ø–µ—Ä!"), 
			callback_data = f"Steak___{Send}"
			)
		
		Menu.add(Choice, Steak, row_width = 1)

		return Menu

	def ChoiceFormatReminderNew(self) -> types.InlineKeyboardMarkup:
		"""–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""

		Menu = types.InlineKeyboardMarkup()
		
		OnceReminder = types.InlineKeyboardButton(
			_("–°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), 
			callback_data = "once_reminder_new"
			)
		WithOutReminders = types.InlineKeyboardButton(
			_("–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"), 
			callback_data = "without_reminders_new"
			)
		Steak = types.InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data = f"Steak___")

		Menu.add(WithOutReminders, OnceReminder, Steak, row_width = 1)
		
		return Menu
	
	def ChoiceFormatReminderChange(self) -> types.InlineKeyboardMarkup:
		"""–í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
		Menu = types.InlineKeyboardMarkup()
		
		EveryDayReminders = types.InlineKeyboardButton(
			_("–í–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), 
			callback_data = "every_day_reminder_change"
			)
		OnceReminder = types.InlineKeyboardButton(
			_("–í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), 
			callback_data = "once_reminder_change"
			)
		WithOutReminders = types.InlineKeyboardButton(
			_("–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"), 
			callback_data = "without_reminders_change"
			)
		Steak = types.InlineKeyboardButton(
			_("–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å!"), 
			callback_data = "Steak_Leavechangenotifications__"
			)

		Menu.add(EveryDayReminders, OnceReminder, WithOutReminders, Steak, row_width = 1)
		
		return Menu
	
	def ChoiceEventToChangeReminder(self, EventID: int) -> types.InlineKeyboardMarkup:
		"""–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
		Menu = types.InlineKeyboardMarkup()

		Choice = types.InlineKeyboardButton(
			_("üîî –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), 
			callback_data = f"choice_event_{EventID}"
			)
		
		Menu.add(Choice)

		return Menu
	
	def ChoiceEventToRemoveReminder(self, EventID: int) -> types.InlineKeyboardMarkup:
		"""–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""

		Menu = types.InlineKeyboardMarkup()

		RemoveReminder = types.InlineKeyboardButton(
			_("üîï –û—Ç–∫–ª—é—á–∏—Ç—å"), 
			callback_data = f"remove_reminder_{EventID}"
			)
		
		Menu.add(RemoveReminder)

		return Menu

	def Confirmation(self, notification_type, subtype: str) -> types.InlineKeyboardMarkup:

		"""
		–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
			notification_type: WithoutNotifications/EveryNotifications;
			subtype: change.
		"""

		Menu = types.InlineKeyboardMarkup()
		
		Yes = types.InlineKeyboardButton(
			_("–î–∞"), 
			callback_data = f"Confirmation_{notification_type}_{subtype}"
			)
		No = types.InlineKeyboardButton(
			_("–ù–µ—Ç"), 
			callback_data = "Steak___"
			)

		Menu.add(Yes, No, row_width = 2)
		
		return Menu

	def SendEmoji(self, emoji: str, delete_type: str = "") -> types.InlineKeyboardMarkup:

		"""
		–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º:
			emoji: –≤–∏–¥ —ç–º–æ–¥–∑–∏;
			delete_type: —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–∏–ø, —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫ –ø—Ä–∏–º–µ—Ä—É, events).
		"""

		Menu = types.InlineKeyboardMarkup()

		Emoji = types.InlineKeyboardButton(
			(emoji), 
			callback_data = f"Emoji_{emoji}_{delete_type}"
			)
		
		Menu.add(Emoji, row_width =1)

		return Menu

	def SteakActions(self, name_button: str, emoji: str = "", delete: str = "", update: str = ""):
		"""
		–ú–µ–Ω—é-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
			name_button: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –≤–∏–¥–∏–º–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
			delete: —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å;
			update: —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å.
		"""

		Menu = types.InlineKeyboardMarkup()

		Steak = types.InlineKeyboardButton(name_button, callback_data = f"Steak_{delete}_{update}_")
		
		Menu.add(Steak, row_width= 1) 

		return Menu
