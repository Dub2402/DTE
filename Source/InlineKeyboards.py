from dublib.TelebotUtils import UserData
from telebot import types
from Source.Functions import _

class InlineKeyboard:

	def __init__(self):
		pass

	def SettingsMenu(self, EventID: int) -> types.InlineKeyboardMarkup:
		# –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é.
		Menu = types.InlineKeyboardMarkup()

		# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫.
		DeleteReminder = types.InlineKeyboardButton(_("üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), callback_data = f"Delete_reminder")
		ChangeReminder = types.InlineKeyboardButton(_("üîî –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), callback_data = f"Change_reminder")
		–°hange = types.InlineKeyboardButton(_("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"), callback_data = f"Change_name")
		Info = types.InlineKeyboardButton(_("‚ÑπÔ∏è –ò–Ω—Ñ–∞"), callback_data = f"Info")
		Return = types.InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data = f"Return")
		# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é.
		Menu.add(DeleteReminder, ChangeReminder, –°hange, Info, Return, row_width= 1) 

		return Menu
	
	def ChoiceEventToRemoveReminder(self, EventID: int) -> types.InlineKeyboardMarkup:
		# –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é.
		Menu = types.InlineKeyboardMarkup()

		# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫.
		RemoveReminder = types.InlineKeyboardButton(
			_("üîï –û—Ç–∫–ª—é—á–∏—Ç—å"), 
			callback_data = f"remove_reminder_{EventID}"
			)
		
		# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é.
		Menu.add(RemoveReminder)

		return Menu
	
	def ChoiceEventToChangeReminder(self, EventID: int) -> types.InlineKeyboardMarkup:
		# –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é.
		Menu = types.InlineKeyboardMarkup()

		# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫.
		Choice = types.InlineKeyboardButton(
			_("üîî –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), 
			callback_data = f"choice_event_{EventID}"
			)
		
		# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é.
		Menu.add(Choice)

		return Menu

	def OK(self) -> types.InlineKeyboardMarkup:
		# –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é.
		Menu = types.InlineKeyboardMarkup()

		# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫.
		OK = types.InlineKeyboardButton(_("–Ø—Å–Ω–µ–Ω—å–∫–æ"), callback_data = f"OK")
		
		# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é.
		Menu.add(OK, row_width= 1) 

		return Menu
	
	def AddNewEvent(self) -> types.InlineKeyboardMarkup:
		Menu = types.InlineKeyboardMarkup()

		Create = types.InlineKeyboardButton(
			_("–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"), 
			callback_data = "create_event"
			)
		
		Menu.add(Create)

		return Menu

	def RemoveEvent(self, EventID: int) -> types.InlineKeyboardMarkup:
		# –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é.
		Menu = types.InlineKeyboardMarkup()

		# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫.
		RemoveEvent = types.InlineKeyboardButton(
			_("–£–¥–∞–ª–∏—Ç—å"), 
			callback_data = f"remove_event_{EventID}"
			)
		
		# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é.
		Menu.add(RemoveEvent)

		return Menu
	
	def DeleteMessage(self, Text: str, object: str = "") -> types.InlineKeyboardMarkup:

		Menu = types.InlineKeyboardMarkup()

		Button = types.InlineKeyboardButton(
			Text, 
			callback_data = "Back_{}".format(object)
			)
		
		# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é.
		Menu.add(Button, row_width =1)

		return Menu


	def ChoiceReminderForNewEvent(self, EventID: int) -> types.InlineKeyboardMarkup:
		# –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é.
		Menu = types.InlineKeyboardMarkup()

		# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫.
		Choice = types.InlineKeyboardButton(
			_("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), 
			callback_data = f"choice_event_{EventID}_"
			)
		Thanks = types.InlineKeyboardButton(
			_("–°–ø–∞—Å–∏–±–æ, –≤—Å–µ —Å—É–ø–µ—Ä!"), 
			callback_data = f"Thanks"
			)
		
		# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é.
		Menu.add(Choice, Thanks, row_width =1)

		return Menu
	
	def AddShare(self) -> types.InlineKeyboardMarkup:
		Menu = types.InlineKeyboardMarkup()

		Share = types.InlineKeyboardButton(
			_("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"), 
			switch_inline_query = "\n\n" +  _("–ü—Ä–æ—Å—Ç–æ –¢-—Ç-—Ç–æ–ø–æ–≤—ã–π –±–æ—Ç –¥–ª—è –æ—Ç—Å—á—ë—Ç–∞ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏–π ü•≥")
			)
		Back = types.InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data = f"Back")
		
		Menu.add(Share, Back, row_width = 1)

		return Menu
	
	def ChoiceFormat(self, user: UserData, FreeID: str) -> types.InlineKeyboardMarkup:
		# –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é.
		Menu = types.InlineKeyboardMarkup()
		
		# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫.
		Remained = types.InlineKeyboardButton(
			_("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å"), 
			callback_data = f"remained_days_{FreeID}"
			)
		Passed = types.InlineKeyboardButton(
			_("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ"), 
			callback_data = f"passed_days_{FreeID}"
			)

		# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é.
		Menu.add(Remained, Passed, row_width = 1)
		
		return Menu
	
	def ChoiceFormatReminderNew(self, user: UserData) -> types.InlineKeyboardMarkup:
		# –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é.
		Menu = types.InlineKeyboardMarkup()
		
		# # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫.
		# EveryDayReminders = types.InlineKeyboardButton(
		# 	_("–û—Å—Ç–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), 
		# 	callback_data = "every_day_reminder"
		# 	)
		OnceReminder = types.InlineKeyboardButton(
			_("–°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), 
			callback_data = "once_reminder"
			)
		WithOutReminders = types.InlineKeyboardButton(
			_("–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"), 
			callback_data = "without_reminders"
			)
		Back = types.InlineKeyboardButton(_("üîô –ù–∞–∑–∞–¥"), callback_data = f"Back")

		# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é.
		Menu.add(WithOutReminders, OnceReminder, Back, row_width = 1)
		
		return Menu
	
	def ChoiceFormatReminderChange(self, user: UserData) -> types.InlineKeyboardMarkup:
		# –ö–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é.
		Menu = types.InlineKeyboardMarkup()
		
		# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫.
		EveryDayReminders = types.InlineKeyboardButton(
			_("–í–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), 
			callback_data = "every_day_reminder"
			)
		OnceReminder = types.InlineKeyboardButton(
			_("–í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), 
			callback_data = "once_reminder"
			)
		WithOutReminders = types.InlineKeyboardButton(
			_("–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"), 
			callback_data = "without_reminders"
			)

		# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é.
		Menu.add(EveryDayReminders, OnceReminder, WithOutReminders, row_width = 1)
		
		return Menu