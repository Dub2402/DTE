from Source.InlineKeyboards import InlineKeyboard

from dublib.TelebotUtils.Users import UsersManager, UserData
from dublib.Engine.GetText import _

from datetime import datetime, timedelta, timezone

from telebot import TeleBot, types

#==========================================================================================#
# >>>>> –§–£–ù–ö–¶–ò–ò <<<<< #
#==========================================================================================#

def CorrectUserTime(user_time: str, delta: int) -> datetime:
	"""
	–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UTC0.

	:param user_time: –ó–∞–¥–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ **%H:%M**.
	:type user_time: str
	:param delta: –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–∞—Ö –º–µ–∂–¥—É —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏.
	:type delta: int
	:return: –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ **%H:%M**.
	:rtype: datetime
	"""
	UserHour, UserMinute = user_time.split(":")
	UserHour = int(UserHour)
	Today = datetime.now(timezone.utc) + timedelta(hours = delta)
	Today = Today.date()

	UserTime = datetime.combine(Today, datetime.strptime(f"{UserHour}:{UserMinute}:00", "%H:%M:%S").time())
	Delta = timedelta(hours = delta)
	CorrectedTime = UserTime - Delta

	return CorrectedTime.replace(tzinfo=timezone.utc)

def Replacing_timezone(User: UserData) -> int:
	if User.has_property("timezone"): Delta = User.get_property("timezone")
	else: Delta = 3

	return Delta

#==========================================================================================#
# >>>>> –ù–ê–ë–û–†–´ –î–ï–ö–û–†–ê–¢–û–†–û–í <<<<< #
#==========================================================================================#

def TimezonerDecorators(bot: TeleBot, users: UsersManager, inline_keyboard: InlineKeyboard):
	"""
	–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.

	:param bot: –ë–æ—Ç Telegram.
	:type bot: TeleBot
	:param users: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
	:type users: UsersManager
	"""

	@bot.callback_query_handler(func = lambda Callback: Callback.data == "tz_more")
	def TimezonesMore(Call: types.CallbackQuery):
		users.auth(Call.from_user)
		bot.edit_message_reply_markup(
			chat_id = Call.message.chat.id,
			message_id = Call.message.id,
			reply_markup = TimezonerInlineKeyboards().timezone_second_page()
		)

	@bot.callback_query_handler(func = lambda Callback: Callback.data == "tz_back")
	def TimezonesBack(Call: types.CallbackQuery):
		users.auth(Call.from_user)
		bot.edit_message_reply_markup(
			chat_id = Call.message.chat.id,
			message_id = Call.message.id,
			reply_markup = TimezonerInlineKeyboards().timezone_first_page()
		)

	@bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("tz_select"))
	def TimezoneSelect(Call: types.CallbackQuery):
		User = users.auth(Call.from_user)
		bot.delete_message(Call.message.chat.id, Call.message.id)
		TimezoneCode = int(Call.data[len("tz_select_"):].replace("m", "-"))
		User.set_property("timezone", TimezoneCode)

		bot.send_message(
			chat_id = Call.message.chat.id,
			text = _("–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏!\n\n–ü—Ä–∏—à–ª–∞ –ø–æ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ! üôå"), 
			reply_markup = inline_keyboard.AddNewEvent(),
			parse_mode = "HTML"
			)

#==========================================================================================#
# >>>>> –®–ê–ë–õ–û–ù–´ <<<<< #
#==========================================================================================#

class TimezonerInlineKeyboards:
	"""–ö–æ–ª–ª–µ–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ Inline-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""

	def __init__(self):
		"""–ö–æ–ª–ª–µ–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ Inline-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""

		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤.
		#==========================================================================================#
		self.__MainTimezones = {
			1: _("–ë–µ—Ä–ª–∏–Ω"),
			7: _("–ë–∞–Ω–≥–∫–æ–∫"),
			2: _("–ö–∏–µ–≤"),
			8: _("–ü–µ–∫–∏–Ω"),
			3: _("–ú–æ—Å–∫–≤–∞"),
			9: _("–¢–æ–∫–∏–æ"),
			4: _("–î—É–±–∞–π"),
			10: _("–°–∏–¥–Ω–µ–π"),
			5: _("–¢–∞—à–∫–µ–Ω—Ç"),
			11: _("–°–æ–ª–æ–º. –æ-–≤–∞"),
			6: _("–î–∞–∫–∫–∞"),
			12: _("–û–∫–ª–µ–Ω–¥")
		}
		self.__SecondaryTimezones = {
			-12: _("–ë–µ–π–∫–µ—Ä"),
			-6: _("–ú–µ—Ö–∏–∫–æ"),
			-11: _("–ü–∞–≥–æ-–ü–∞–≥–æ"),
			-5: _("–ù—å—é-–ô–æ—Ä–∫"),
			-10: _("–ì–æ–Ω–æ–ª—É–ª—É"),
			-4: _("–ö–∞—Ä–∞–∫–∞—Å"),
			-9: _("–ê–Ω–∫–æ—Ä–∏–¥–∂"),
			-3: _("–ë—É—ç–Ω–æ—Å-–ê–π—Ä–µ—Å"),
			-8: _("–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å"),
			-2: _("–Æ–∂–Ω–∞—è –ì–µ–æ—Ä–≥–∏—è"),
			-7: _("–î–µ–Ω–≤–µ—Ä"),
			-1: _("–ê–∑–æ—Ä—Å–∫–∏–µ –æ-–≤–∞"),
		}

	def timezone_first_page(self) -> types.InlineKeyboardMarkup:
		"""–°—Ç—Ä–æ–∏—Ç Reply-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –≤—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1)."""

		Menu = types.InlineKeyboardMarkup(row_width = 3)
		TimezoneButtons = list()
		UTC_Now = datetime.now(timezone.utc)
		
		for Timezone, City in self.__MainTimezones.items():
			TimezoneCode = str(Timezone)
			RegionalTime = UTC_Now + timedelta(hours = Timezone)
			RegionalTime = RegionalTime.strftime("%H:%M")
			if TimezoneCode.startswith("-"): TimezoneCode = "m" + TimezoneCode.lstrip("-")
			TimezoneButtons.append(types.InlineKeyboardButton(f"{City} [{RegionalTime}]", callback_data = f"tz_select_{TimezoneCode}"))

		Menu.add(*TimezoneButtons, row_width = 2)
		Menu.add(types.InlineKeyboardButton(_("–ï—â—ë ‚ñ∂Ô∏è"), callback_data = "tz_more"))

		return Menu
	
	def timezone_second_page(self) -> types.InlineKeyboardMarkup:
		"""–°—Ç—Ä–æ–∏—Ç Reply-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –≤—ã–±–æ—Ä —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2)."""

		Menu = types.InlineKeyboardMarkup(row_width = 3)
		TimezoneButtons = list()
		UTC_Now = datetime.now(timezone.utc)
		
		for Timezone, City in self.__SecondaryTimezones.items():
			TimezoneCode = str(Timezone)
			RegionalTime = UTC_Now + timedelta(hours = Timezone)
			RegionalTime = RegionalTime.strftime("%H:%M")
			if TimezoneCode.startswith("-"): TimezoneCode = "m" + TimezoneCode.lstrip("-")
			TimezoneButtons.append(types.InlineKeyboardButton(f"{City} [{RegionalTime}]", callback_data = f"tz_select_{TimezoneCode}"))

		Menu.add(*TimezoneButtons, row_width = 2)
		UTC_Now = UTC_Now.strftime("%H:%M")
		Menu.add(types.InlineKeyboardButton(_("–ì—Ä–∏–Ω–≤–∏—á") + f" [{UTC_Now}]", callback_data = "tz_select_0"))
		Menu.add(types.InlineKeyboardButton(_("‚óÄÔ∏è –ù–∞–∑–∞–¥"), callback_data = "tz_back"))

		return Menu