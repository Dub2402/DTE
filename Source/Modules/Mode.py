from dublib.TelebotUtils.Users import UserData, UsersManager
from dublib.Engine.GetText import _

from telebot import TeleBot, types

class Data:

	@property
	def mode(self):
		"""–†–µ–∂–∏–º –±–æ—Ç–∞."""

		if not self.__User.has_property("mode"): self.__User.set_property("mode", "classic")
		return self.__User.get_property("mode")

	def __init__(self, user: UserData):
		"""
		–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–æ–Ω—É—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

		:param user: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		:type user: UserData
		"""

		self.__User = user

class InlineTemplates:
	"""–†–µ–∂–∏–º—ã –±–æ—Ç–æ–≤."""

	def modes_bot():

		menu = types.InlineKeyboardMarkup()

		modes = {
			_("‚úÖ –ö–ª–∞—Å—Å–∏–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"): "classic",
			_("üëº –ù—è—à–∫–∞"): "sweetie",
			_("üç∫ –ö–æ—Ä–µ—à"): "buddy",
			_("üí™ –ú–æ—Ç–∏–≤–∞—Ç–æ—Ä"): "motivator",
			_("ü¶ñ –ì–∞–∑–ª–∞–π—Ç–µ—Ä (18+)"): "gaslighter",
			_("üö¶ –†–∞–Ω–¥–æ–º"): "random",
			_("üîô Back"): "delete_mode",
		}

		for string in modes.keys(): menu.add(types.InlineKeyboardButton(string, callback_data = modes[string]), row_width = 1)

		return menu

class Decorators:
	"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

	def __init__(self, modes: "Modes"):
		self.__modes = modes
		
	def inline_keyboards(self):
		"""–û–±—Ä–∞–±–æ—Ç–∫–∞ inline_keyboards."""

		@self.__modes.bot.callback_query_handler(func = lambda Callback: Callback.data == "bot_mode")
		def choice_bot_mode(Call: types.CallbackQuery):
			user = self.__modes.users.auth(Call.from_user)

			self.__modes.bot.send_message(
				chat_id = Call.message.chat.id,
				text = "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º –±–æ—Ç–∞, –∞ –∏–º–µ–Ω–Ω–æ —Ç–æ, –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç —Å –≤–∞–º–∏ –æ–±—â–∞—Ç—å—Å—è:",
				parse_mode = "HTML",
				reply_markup = InlineTemplates.modes_bot()
				)
			
			self.__modes.bot.answer_callback_query(Call.id)

		@self.__modes.bot.callback_query_handler(func = lambda Callback: Callback.data in ("classic", "sweetie", "buddy", "motivator", "gaslighter", "random"))
		def choice_bot_mode(Call: types.CallbackQuery):
			user = self.__modes.users.auth(Call.from_user)

			texts = {
			"classic": _("–ö–ª–∞—Å—Å–∏–∫ - —ç—Ç–æ —Ä–µ–∂–∏–º –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ-–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Ç–æ–Ω–µ. –í—Å–µ —á—ë—Ç–∫–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É. –ü—Ä–∏–º–µ—Ä: –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∏—Ç —á–µ—Ä–µ–∑ 41 –¥–µ–Ω—å!"),
			"sweetie": _("üëº –ù—è—à–∫–∞"),
			"buddy": _("üç∫ –ö–æ—Ä–µ—à"),
			"motivator": _("üí™ –ú–æ—Ç–∏–≤–∞—Ç–æ—Ä"),
			"gaslighter": _("ü¶ñ –ì–∞–∑–ª–∞–π—Ç–µ—Ä (18+)"),
			"random": _("üö¶ –†–∞–Ω–¥–æ–º")
		}


			self.__modes.bot.send_message(
				chat_id = Call.message.chat.id,
				text = "1",
				parse_mode = "HTML",
				reply_markup = InlineTemplates.modes_bot()
				)
			
			self.__modes.bot.answer_callback_query(Call.id)

class Modes:
	"""–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Ä–µ–∂–∏–º—ã –±–æ—Ç–∞."""

	@property
	def users(self):
		"""–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
		return self.__users
	
	@property
	def bot(self):
		"""Telegram bot."""

		return self.__bot
	
	@property
	def decorators(self):
		"""–ù–∞–±–æ—Ä –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤."""

		return self.__Decorators

	def __init__(self, usersmanager: UsersManager, bot: TeleBot):

		self.__users = usersmanager
		self.__bot = bot

		self.__Decorators = Decorators(self)