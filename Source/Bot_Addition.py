from Source.Functions import GetFreeID
from Source.InlineKeyboards import InlineKeyboard

from dublib.TelebotUtils import UserData
from dublib.TelebotUtils.Master import TeleMaster
from dublib.Engine.GetText import _

import telebot
from telebot import types
from telebot.types import ReactionTypeEmoji


def MessageWaitingName(Bot: telebot.TeleBot, Message: types.Message, inline_keyboard: InlineKeyboard, User: UserData, text: str, isbutton: bool = True):
	"""
	–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: 
		—Ç–µ–∫—Å—Ç: 
			–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ç–∞–∫ –∂–¥—ë—Ç–µ!
		–∫–Ω–æ–ø–∫–∏: 
			C–ø–∞—Å–∏–±–æ, —á—É—Ç—å –ø–æ–∑–∂–µ!
	–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –≤ —Ñ–∞–π–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	"""
	if isbutton: button = inline_keyboard.SteakActions(name_button = _("C–ø–∞—Å–∏–±–æ, —á—É—Ç—å –ø–æ–∑–∂–µ!"), delete = "WaitingName")
	else: button = None
	WaitingName = Bot.send_message(
		chat_id = Message.chat.id, 
		text = text,
		parse_mode = "HTML",
		reply_markup = button
		)
	
	SaveMessageID(User, WaitingName.id, ["WaitingName"])
	FreeID = GetFreeID(User.get_property("events"))
	User.set_property("EventID", str(FreeID))
	User.set_expected_type("name")	

def SendFormatReminders(Bot: telebot.TeleBot, inline_keyboard: InlineKeyboard, Message: types.Message, New_User: bool = False) -> types.Message:
	
	"""
	–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: 
		—Ç–µ–∫—Å—Ç: 
			–°—É–ø–µ—Ä! –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–Ω–∏?)
		–∫–Ω–æ–ø–∫–∏: 
			—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
			–æ—Ç—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–Ω–∏
	"""

	text = _("–°—É–ø–µ—Ä! –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–Ω–∏?)") 
	if New_User: 
		text = _("–°—É–ø–µ—Ä! –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–Ω–∏?)\n\n<b>–°–æ–≤–µ—Ç:</b> <i>–î–ª—è —Å–≤–æ–µ–≥–æ –î–† —á–∞—Å—Ç–æ –≤—ã–±–∏—Ä–∞—é—Ç –æ—Ç—Å—á–∏—Ç—ã–≤–∞—Ç—å –¥–Ω–∏, –∞ –≤–æ—Ç –¥–ª—è –î–† –¥—Ä—É–≥–∏—Ö - —Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ü§≠</i>")
		
	DeleteMessageNotification = Bot.send_message(
		Message.chat.id,
		text = text,
		reply_markup = inline_keyboard.ChoiceFormatReminderStart(),
		parse_mode = "HTML"
		)
	return DeleteMessageNotification

def SendChangeFormat(Bot: telebot.TeleBot, Call: types.CallbackQuery, inline_keyboard: InlineKeyboard) -> types.Message:
	"""
	–ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–ª—è –ø–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –æ–Ω —Ö–æ—á–µ—Ç –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
	"""
	DeleteMessageNotification = Bot.send_message(
		Call.message.chat.id,
		"–î–ª—è –æ—Ç—Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <b>—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å</b>.",
		parse_mode = "HTML",
		reply_markup = inline_keyboard.ChoiceFormat()
		)
	
	Bot.answer_callback_query(Call.id)

	return DeleteMessageNotification

def isEventExist(User: UserData, ID: str) -> bool:
	"""–°–æ–∑–¥–∞–Ω–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID."""

	return ID in User.get_property("events").keys()

def GetDataEvent(User: UserData):
	
	"""
	–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤. 
		Name: –∏–º—è —Å–æ–±—ã—Ç–∏—è;
		Date: –¥–∞—Ç–∞;
		Format: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ –æ—Ç –¥–∞—Ç—ã/—Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–∞—Ç—ã;
		ReminderFormat: –≤–∏–¥ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π;
		Reminder: –∑–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
		Time: –≤–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
	"""

	Name = None
	Date = None 
	ReminderFormat = None
	Format = None
	Reminder = None 
	Time = None

	if User.has_property("Name"): Name = User.get_property("Name")

	if User.has_property("Date"): Date = User.get_property("Date")

	if User.has_property("Format"): Format = User.get_property("Format")

	if User.has_property("ReminderFormat"): ReminderFormat= User.get_property("ReminderFormat")

	if User.has_property("Reminder"): Reminder = User.get_property("Reminder")

	if User.has_property("Time"): Time = User.get_property("Time")

	Data = {"Name": Name, "Date": Date, "ReminderFormat": ReminderFormat, "Format": Format, "Reminder": Reminder, "Time": Time}

	return Data

def GetPropertyEvent(User: UserData, property: str, ID: str):
	"""–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ ID."""

	Name = User.get_property("events")[ID][property]

	return Name

def SetDataEvent(User: UserData, Data: dict, FreeID: int):
	""" –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """

	Events: dict = User.get_property("events")
	Events[str(FreeID)] = Data
	User.set_property("events", Events)
	User.clear_temp_properties()

def DeleteEvent(User: UserData, EventID: int):
	"""–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ ID."""

	Events = User.get_property("events")
	del Events[EventID]
	User.set_property("events", Events)

def SetPropertyEvent(User: UserData, Data: dict, FreeID: int):
	"""–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """

	Events: dict = User.get_property("events")
	for key, value in Data.items():
		Events[str(FreeID)][key] = value
	User.set_property("events", Events)

def SaveMessageID(User: UserData, ID: int, keys: list[str]):
	"""–î–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è.
		User: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
		ID: id —Å–æ–æ–±—â–µ–Ω–∏—è;
		key: –∫–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ñ–∞–π–ª–µ.
	"""

	for key in keys:
		Data = list()
		if User.has_property(key):
			Data: list = User.get_property(key)
		Data.append(ID)
		User.set_property(key, Data)

def DeleteMessageID(User: UserData, Call: types.CallbackQuery, masterbot: TeleMaster, key: str):
	"""–î–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è.
		User: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;
		Call: —ç–∫–∑–µ–º–ª—è—Ä –∫–ª–∞—Å—Å–∞ types.CallbackQuery;
		Bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ telebot.TeleBot;
		key: –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ñ–∞–π–ª–µ.
	"""

	reversed_messages = reversed(User.get_property(key))
	masterbot.safely_delete_messages(chat_id = Call.message.chat.id, messages = reversed_messages)
	User.remove_property(key)

def SendMessagewithEmoji(Bot: telebot.TeleBot, Call: types.CallbackQuery, inline_keyboard: InlineKeyboard):
	"""
	–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: 
		—Ç–µ–∫—Å—Ç: 
			–ò –≤–∞–º —Å–ø–∞—Å–∏–±–æ!\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ))
		–∫–Ω–æ–ø–∫–∞: 
			‚ù§Ô∏è
	"""

	Bot.send_message(
			Call.message.chat.id,
			_("–ò –≤–∞–º —Å–ø–∞—Å–∏–±–æ!\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ))"),
			reply_markup = inline_keyboard.SendEmoji("‚ù§Ô∏è")
		)
	
def PutReaction(Bot: telebot.TeleBot, Call: types.CallbackQuery, Emoji: str):

	"""
	–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. 
		Emoji: —Ç–∏–ø —ç–º–æ–¥–∑–∏.
	"""
	Bot.edit_message_reply_markup(
		Call.message.chat.id,
		Call.message.id,
		reply_markup = None
	)

	Bot.set_message_reaction(
			Call.message.chat.id, 
			Call.message.id, 
			[ReactionTypeEmoji(Emoji)]
			)

def SendErrorInput(Bot: telebot.TeleBot, User: UserData, Message: types.Message, expected_type: str, text: str = None):
	if text: text = text
	else: text = _("–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –æ—Ç –º–µ–Ω—è —Ö–æ—Ç–∏—Ç–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
	DeleteMessageNotification = Bot.send_message(
		chat_id = Message.chat.id,
		text = text,
		parse_mode = "HTML")
	SaveMessageID(User, DeleteMessageNotification.id, ["Leavechangenotifications", "MessageNotificationsChange"])
	User.set_expected_type(expected_type)
	